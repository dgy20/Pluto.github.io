<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://uihh.cn/atom.xml" rel="self"/>
  
  <link href="https://uihh.cn/"/>
  <updated>2021-06-23T01:09:38.511Z</updated>
  <id>https://uihh.cn/</id>
  
  <author>
    <name>yyxxx229</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue中watch用法详解</title>
    <link href="https://uihh.cn/2021/06/22/watch/"/>
    <id>https://uihh.cn/2021/06/22/watch/</id>
    <published>2021-06-22T11:01:52.000Z</published>
    <updated>2021-06-23T01:09:38.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>  当data中变量的值变化时，watch监听到并且执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">value</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="function"><span class="title">value</span>(<span class="params">newVal, oldVal</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* 要执行操作 */</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="handler方法和immediate属性"><a href="#handler方法和immediate属性" class="headerlink" title="handler方法和immediate属性"></a>handler方法和immediate属性</h2><p>  上面的例子只有value的值变化时，watch才会执行。如果想从开始的时候就对value进行监听，就需要用到 <code>handler</code> 和 <code>immediate</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line"><span class="attr">value</span>:&#123;</span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVla</span>)</span> &#123;</span><br><span class="line"><span class="comment">/* 要执行操作 */</span> </span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 当immediate 值为true时, 会立即执行handler方法</span></span><br><span class="line"><span class="comment">// 如果值为false，效果同上面例子</span></span><br><span class="line"><span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deep属性（深度监听）"><a href="#deep属性（深度监听）" class="headerlink" title="deep属性（深度监听）"></a>deep属性（深度监听）</h2><blockquote><p>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变。需要添加deep属性对 对象进行深度监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">obj</span>:&#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">c</span>:&#123;</span><br><span class="line"><span class="attr">d</span>:<span class="number">3</span></span><br><span class="line"><span class="attr">f</span>:<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line"><span class="attr">obj</span>:&#123;</span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class="line"><span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时会给整个对象的属性都加上监听，当对象属性较多时，每个值变化都会触发handler函数。<br>如果只需要监听一个属性，可以使用字符串形式监听对象内的单个属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line"><span class="string">&#x27;c.d&#x27;</span>:&#123;</span><br><span class="line"><span class="function"><span class="title">handler</span>(<span class="params">newVla, oldVal</span>)</span>&#123;&#125;,</span><br><span class="line"><span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组（一维、多维）的变化不需要通过深度监听，对象数组中对象的属性变化需要deep的深度监听</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;  当data中变量的值变化时，watch监听到并且执行&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;watch&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newVal, oldVal&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;/* 要执行操作 */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://uihh.cn/2021/06/07/Promise/"/>
    <id>https://uihh.cn/2021/06/07/Promise/</id>
    <published>2021-06-07T10:19:15.000Z</published>
    <updated>2021-06-11T09:03:02.386Z</updated>
    
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="Promise" scheme="https://uihh.cn/categories/javascript/Promise/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://uihh.cn/2021/06/07/webpack/"/>
    <id>https://uihh.cn/2021/06/07/webpack/</id>
    <published>2021-06-07T09:03:06.000Z</published>
    <updated>2021-06-07T10:05:15.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-config-js配置项模板"><a href="#webpack-config-js配置项模板" class="headerlink" title="webpack.config.js配置项模板"></a>webpack.config.js配置项模板</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>),</span><br><span class="line">HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,  <span class="comment">// development 开发环境    production  生产环境</span></span><br><span class="line">  <span class="comment">// 入口文件  多页面要写成对象格式</span></span><br><span class="line">  <span class="attr">entry</span>:&#123;</span><br><span class="line">    <span class="comment">// 名: 路径</span></span><br><span class="line">    <span class="attr">index</span>:path.resolve(__dirname, <span class="string">&#x27;./src/js/index.js&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包</span></span><br><span class="line">  <span class="attr">outpyt</span>:&#123;</span><br><span class="line">    <span class="comment">// 打包到哪个文件夹下</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>   <span class="comment">//  name是一个变量，自动去寻找entry 下的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置规则</span></span><br><span class="line">  <span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      <span class="comment">// 匹配相同文件后缀结尾的文件，规定这类文件要使用什么loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: path.resolve(__dirname, <span class="string">&#x27;node_modules&#x27;</span>)  <span class="comment">// 编译转换时 排除node_modules 内的js文件 </span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 需处理多个loader时，写成数组形式</span></span><br><span class="line">        <span class="comment">// 处理 use 数组时， 案由下到上的顺序，先经过 css-loader  再处理 style-loader</span></span><br><span class="line">        use:[</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;scss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tpl$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;ejs-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 放入实例化对象， 例： 需要处理html时，require(&#x27;html-webpack-plugin&#x27;) 需要引入对应插件（一个构造函数）</span></span><br><span class="line">  <span class="comment">// 所有的loader 都不会导入到配置文件中， 以plugin结尾的一般都需要导入</span></span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">minify</span>:&#123;</span><br><span class="line">        <span class="comment">// 移除所有注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 清除所有的空格和换行</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 打包后的文件名称</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 需要打包的文件</span></span><br><span class="line">      <span class="attr">template</span>: path.resolve(__dirname, <span class="string">&#x27;/src/index.html&#x27;</span>),</span><br><span class="line">      <span class="comment">// 入口文件 取决于 entry 里的键名，如果有多个，使用数组的形式</span></span><br><span class="line">      <span class="attr">chunks</span>:[<span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">      <span class="comment">// 排除node_modules</span></span><br><span class="line">      <span class="attr">excludeChunks</span>: [<span class="string">&#x27;node_modules&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="comment">// 当启动devServer时 自动打开浏览器</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 主机</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3300</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置运行-webpack-的命令"><a href="#配置运行-webpack-的命令" class="headerlink" title="配置运行 webpack 的命令"></a>配置运行 webpack 的命令</h2><blockquote><p>package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config webpack.config.js --reason  --color  --progress&quot;</span>,</span><br><span class="line">  <span class="comment">// 打包时的命令</span></span><br><span class="line">  <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dev配置可选项"><a href="#dev配置可选项" class="headerlink" title="dev配置可选项"></a>dev配置可选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server          启动服务</span><br><span class="line">--content-base dist/        dev-server 运行的目录</span><br><span class="line">--hot                       热启动</span><br><span class="line">--config webpack.config.js  webpack配置项</span><br><span class="line">--progress                  打包的进度</span><br><span class="line">--display-modules           打包时的模块</span><br><span class="line">--colors                    打包时输出彩色文字</span><br><span class="line">--display-reasons           打包时的提示信息</span><br></pre></td></tr></table></figure><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><blockquote><p>安装在开发环境下的<br>–save-dev  /     -D<br>安装在生产环境下    例：ejs<br>–save     /    -S</p><ul><li>webpack 必备工具:<blockquote><p>webpack<br>webpack-cli<br>webpack-dev-server</p></blockquote></li></ul></blockquote><blockquote><ul><li>处理JS  -&gt;  ES6  ES7  ES8 装饰器  babel 编译<blockquote><p>ES6：<br>babel-loader@7<br>babel-core<br>babel-preset-env<br>ES7:<br>babel-plugin-transform-runtime<br>ES8:<br>babel-plugin-transform-decorators<br>babel-plugin-transform-decorators-legacy</p></blockquote></li></ul></blockquote><blockquote><ul><li>样式处理  sass -&gt; css -&gt; style<blockquote><p>sass-loader<br>node-sass<br>css-loader<br>style-loader</p></blockquote></li></ul></blockquote><!-- postcss-loader  autoprefixer   css3 自动添加前缀  适配浏览器--><p>Forth Step:</p><blockquote><ul><li>模板处理  ejs  ||  tpl<blockquote><p>ejs-loader</p></blockquote></li></ul></blockquote><blockquote><ul><li>处理HTML<blockquote><p>html-webpack-plugin</p></blockquote></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack-config-js配置项模板&quot;&gt;&lt;a href=&quot;#webpack-config-js配置项模板&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.js配置项模板&quot;&gt;&lt;/a&gt;webpack.config.js配置项</summary>
      
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=suiji&amp;format=images" type="image"/>
    
    
    <category term="webpack" scheme="https://uihh.cn/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://uihh.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>LazyFunction</title>
    <link href="https://uihh.cn/2021/06/03/LazyFunction/"/>
    <id>https://uihh.cn/2021/06/03/LazyFunction/</id>
    <published>2021-06-03T03:51:30.000Z</published>
    <updated>2021-06-22T11:02:04.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><pre><code>1. timeStamp 污染全局2. 执行第一次之后，timeStamp 已经有值，但后续每次执行都会进入 if 语句</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：</span></span><br><span class="line"><span class="keyword">var</span> timeStamp = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimeStamp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (timeStamp) &#123;</span><br><span class="line"><span class="keyword">return</span> timeStamp</span><br><span class="line">&#125;</span><br><span class="line">timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">return</span> timeStamp</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><pre><code>1.执行一遍外层函数，拿到需要的值后，在函数内部重写自身，返回需要的值2.后续调用 不需要每次都执行原函数 重读的代码段</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：</span></span><br><span class="line"><span class="keyword">var</span> getTimeStamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">getTimeStamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> timeStamp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getTimeStamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="普通函数添加事件"><a href="#普通函数添加事件" class="headerlink" title="普通函数添加事件"></a>普通函数添加事件</h3><blockquote><p>每次执行都要对浏览器进行判断。 可以在第一次判断后就保留判断结果，再次执行时就不需要判断了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line">el.addEventListener(type, fn, capture);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">el.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">fn.call(el)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">el[<span class="string">&#x27;on&#x27;</span> + type] = fn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="惰性函数添加事件"><a href="#惰性函数添加事件" class="headerlink" title="惰性函数添加事件"></a>惰性函数添加事件</h3><blockquote><p>第一次判断之后，在函数体内部重写自身，后续执行的是重写后的函数，不需要再进行无用的判断</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (el.addEventlistener) &#123;</span><br><span class="line">addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line">el.addEventlistener(type, fn, capture)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</span><br><span class="line">addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">el.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">fn.call(el)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">el[<span class="string">&#x27;on&#x27;</span> + type] = fn</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> addEvent(el, type, fn, capture);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;普通函数&quot;&gt;&lt;a href=&quot;#普通函数&quot; class=&quot;headerlink&quot; title=&quot;普通函数&quot;&gt;&lt;/a&gt;普通函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. timeStamp 污染全局
2. 执行第一次之后，timeStamp 已经有值，但后续每次执行都会进</summary>
      
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="高阶函数" scheme="https://uihh.cn/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>debounce &amp; throttle</title>
    <link href="https://uihh.cn/2021/06/02/debounce/"/>
    <id>https://uihh.cn/2021/06/02/debounce/</id>
    <published>2021-06-02T09:36:03.000Z</published>
    <updated>2021-06-03T03:21:20.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>n秒内只要触发事件，就重新计时，<br>一直触发事件处理函数的程序永远不能被执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  fn  需要设置防抖的函数</span></span><br><span class="line"><span class="comment">  *  time  执行时需要延迟的时间</span></span><br><span class="line"><span class="comment">  *  triggleNow  是否马上触发第一次</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.onmouseover = debounce(test, <span class="number">1000</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, time, triggleNow</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">args = <span class="built_in">arguments</span>;</span><br><span class="line"><span class="keyword">if</span> (t) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (triggleNow) &#123;</span><br><span class="line"><span class="keyword">var</span> exec = !t;</span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">t = <span class="literal">null</span></span><br><span class="line">&#125;, time)</span><br><span class="line"><span class="keyword">if</span> (exec) &#123;</span><br><span class="line">fn.apply(_self, args)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">fn.apply(_self, args)</span><br><span class="line">&#125;, time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">debounced.remove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><blockquote><p>事件被触发，n秒之内只执行一次事件处理函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">input.onkeyup = throttle(check, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">this</span>.value;</span><br><span class="line"><span class="keyword">if</span> (val.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Invalid length&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = <span class="literal">null</span>,</span><br><span class="line">begin = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">args = argumens,</span><br><span class="line">cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">clearTimeout</span>(t);</span><br><span class="line"><span class="keyword">if</span>( cur - begin &gt;= delay )&#123;</span><br><span class="line">fn.apply(_self, args);</span><br><span class="line">begin = cur;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">t = <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">fn.apply(_self, args)</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数防抖&quot;&gt;&lt;a href=&quot;#函数防抖&quot; class=&quot;headerlink&quot; title=&quot;函数防抖&quot;&gt;&lt;/a&gt;函数防抖&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;n秒内只要触发事件，就重新计时，&lt;br&gt;一直触发事件处理函数的程序永远不能被执行&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=fengjing&amp;format=images" type="image"/>
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="防抖、节流" scheme="https://uihh.cn/tags/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Symbol.iterator &amp; 生成器函数</title>
    <link href="https://uihh.cn/2021/05/31/Symbol-iterator/"/>
    <id>https://uihh.cn/2021/05/31/Symbol-iterator/</id>
    <published>2021-05-31T09:35:42.000Z</published>
    <updated>2021-06-03T03:20:46.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="给对象添加迭代器属性"><a href="#给对象添加迭代器属性" class="headerlink" title="给对象添加迭代器属性"></a>给对象添加迭代器属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line"><span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">// 把当前对象转换为Map对象</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">this</span>)&#123;</span><br><span class="line">map.set(key, <span class="built_in">this</span>[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// map.keys()  键名</span></span><br><span class="line"><span class="comment">// map.values() 键值</span></span><br><span class="line"><span class="comment">// mao.entries() 键值对</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="function"><span class="title">next</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 拿到每个键值对形成的数组</span></span><br><span class="line"><span class="comment">// console.log(map.entries())  =&gt; &#123;&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2, &quot;c&quot; =&gt; 3&#125;</span></span><br><span class="line"><span class="keyword">var</span> mapEntries = [...map.entries()];</span><br><span class="line"><span class="comment">// mapEntries = [[&quot;a&quot;, 1],[&quot;b&quot;, 2],[&quot;c&quot;, 3]]</span></span><br><span class="line"><span class="keyword">if</span>(index &lt; map.size)&#123;</span><br><span class="line"><span class="comment">// 只要当前位置比对象的长度小 就返回打散后的map对象的当前下标的值和值为false</span></span><br><span class="line">                    <span class="comment">// done 代表是否迭代完成</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">value</span>:mapEntries[index++],</span><br><span class="line"><span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则返回的值为 undefined  done为true</span></span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><blockquote><p>每次调用next函数时，只会执行到下一个yield，之后的代码不会执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> value1 = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(value1);  <span class="comment">// &#x27;two&#x27;</span></span><br><span class="line"><span class="keyword">let</span> value2 = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value2);  <span class="comment">// &#x27;three&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> value3 = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value3);  <span class="comment">// &#x27;four&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> value4 = <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value4);  <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iter = test();</span><br><span class="line"><span class="comment">// 第一次调用传值不会被接收，第二次传值时会传递给第一个yield位置的变量  第三次传值 -&gt; 第二个yield  以此类推</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next(<span class="string">&#x27;one&#x27;</span>));  <span class="comment">//  &#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next(<span class="string">&#x27;two&#x27;</span>));  <span class="comment">//  &#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next(<span class="string">&#x27;three&#x27;</span>));  <span class="comment">//  &#123;value: 3, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next(<span class="string">&#x27;four&#x27;</span>));  <span class="comment">//  &#123;value: 4, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next());  <span class="comment">//  &#123;value: undefined, done: true&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用生成器函数编写迭代器"><a href="#使用生成器函数编写迭代器" class="headerlink" title="使用生成器函数编写迭代器"></a>使用生成器函数编写迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line"><span class="attr">c</span>:<span class="number">3</span>,</span><br><span class="line">[<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">this</span>)&#123;</span><br><span class="line">map.set(key, <span class="built_in">this</span>[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> mapEntries = [...map.entries()];</span><br><span class="line"><span class="comment">// 循环生成yield</span></span><br><span class="line"><span class="keyword">while</span>(index &lt; mapEntries.length)&#123;</span><br><span class="line"><span class="keyword">yield</span> mapEntries[index++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// for of  底层相当于调用了 obj[Symbol.iterator].next().value</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> obj) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i); <span class="comment">// [&quot;a&quot;, 1]  [&quot;b&quot;, 2]  [&quot;c&quot;, 3]  undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;给对象添加迭代器属性&quot;&gt;&lt;a href=&quot;#给对象添加迭代器属性&quot; class=&quot;headerlink&quot; title=&quot;给对象添加迭代器属性&quot;&gt;&lt;/a&gt;给对象添加迭代器属性&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab</summary>
      
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=dongman&amp;format=images" type="image"/>
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    
  </entry>
  
</feed>
