<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>看什么博客，去看文档啊</title>
  
  
  <link href="https://uihh.cn/atom.xml" rel="self"/>
  
  <link href="https://uihh.cn/"/>
  <updated>2022-02-10T10:06:11.635Z</updated>
  <id>https://uihh.cn/</id>
  
  <author>
    <name>Pluto</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue3笔记</title>
    <link href="https://uihh.cn/2022/02/10/vue3%E7%AC%94%E8%AE%B0/"/>
    <id>https://uihh.cn/2022/02/10/vue3%E7%AC%94%E8%AE%B0/</id>
    <published>2022-02-10T00:42:22.000Z</published>
    <updated>2022-02-10T10:06:11.635Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><!-- ### 变化vue3可以没有唯一根节点，默认会在最外层包一层 <fragment></fragment>vue3移除了 $children --><h2 id="composition-API"><a href="#composition-API" class="headerlink" title="composition API"></a>composition API</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p><strong>在<code>setup</code>中应该避免使用this，因为this不指向组件实例</strong></p><h4 id="setup函数参数"><a href="#setup函数参数" class="headerlink" title="setup函数参数"></a>setup函数参数</h4><ul><li>参数1: props<blockquote><p><code>props</code>就是父组件传递过来的属性，会被放到<code>props</code>对象中，如果需要在<code>setup</code>中使用，需要配合<code>props</code>配置项,通过<code>props</code>参数获取</p><ul><li>定义props的类型，还是在props配置项中定义</li><li>且在template中依然是可以正常去使用props中的属性</li><li>在setup函数中想要使用props，不可以通过 this 去获取，直接通过参数使用即可</li></ul></blockquote></li><li>参数2: context<blockquote><p><code>context</code>包含三个属性</p><ul><li><code>attrs</code>：所有未在props中接收的属性</li><li><code>slots</code>：父组件传递过来的插槽</li><li><code>emit</code>：调用父组件方法时用到的<code>emit</code></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="setup函数的返回值"><a href="#setup函数的返回值" class="headerlink" title="setup函数的返回值"></a>setup函数的返回值</h4><ul><li>setup的返回值可以在<font color='red'>模板template中被使用</font>,也就是说我们可以<font color=red>通过setup的返回值来替代data选项</font></li><li>可以<font color=red>返回一个执行函数来代替在methods中定义的方法</font></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>name: &#123;&#123;name&#125;&#125;, age: &#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> name = <span class="string">&#x27;TT&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> age = <span class="number">18</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> increment = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        age++</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">const</span> decrement = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        age--</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        name,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        age,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        increment,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        decrement</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="setup不可以使用this"><a href="#setup不可以使用this" class="headerlink" title="setup不可以使用this"></a>setup不可以使用this</h4><ul><li>表达的含义是this并没有指向当前组件实例</li><li>并且在setup被调用之前，data、computed、methods等都没有被解析</li><li>所以无法在setup中获取this</li></ul><h4 id="setup中使用ref"><a href="#setup中使用ref" class="headerlink" title="setup中使用ref"></a>setup中使用ref</h4><ul><li>只需要定义一个ref对象，绑定到元素或者组件的ref属性上即可</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2 ref=&quot;titleRef&quot;&gt;我是标题&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  export default &#123;</span><br><span class="line">    const titleRef = ref(null) // 先用null占位</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      titleRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Reactive-API"><a href="#Reactive-API" class="headerlink" title="Reactive API"></a>Reactive API</h3><ul><li>如果想为在setup中定义的数据提供响应式的特性，那么我们可以使用reactive的函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = reactive(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>原因<ul><li>这是因为当我们<font color=red>使用reactive函数处理我们的数据之后</font>，数据<font color=red>再次被使用</font>时就会进行<font color=red>依赖收集</font></li><li>当<font color=red>数据发生改变</font>时，所有<font color=red>收集到的依赖</font>都是<font color=red>进行对应的响应式操作</font>（比如更新界面）</li><li>事实上，我们编写的<font color=red>data选项</font>，也是在内部交给了 <strong>reactive函数</strong> 将其编成响应式对象的</li></ul></li><li>限制<ul><li><code>reactive</code>要求我们必须传入的是一个对象或数组类型，如果传入 <strong>基本数据类型(String, Number, Boolean)会报一个警告</strong>:<br> <strong><font style="background: #f2be45" color=red>value cannot be made reactive: Hello World</font></strong></li></ul></li></ul><h3 id="Ref-API"><a href="#Ref-API" class="headerlink" title="Ref API"></a>Ref API</h3><ul><li>ref 会返回一个<font color=red>可变的响应式对象</font>， 该对象作为一个 <strong><font color=red>响应式的引用</font></strong> 维护着它内部的值，这就是ref名称的来源</li><li>它内部的值是在ref的value 属性中被维护的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = ref(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(message.value)  -&gt; <span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure></li><li>注意事项：<ul><li>在<strong>模板中引入ref的值</strong>时，Vue会<strong>自动帮助我们进行解包</strong>操作，所以我们并<font color=red>不需要在模板中通过ref.value</font>的方式来使用</li><li>但是在<strong>setup 函数内部</strong>，它依然是一个<strong>ref引用</strong>，所以对其进行操作时，我们依然<font color=red>需要使用ref.value</font>的方式</li></ul></li></ul><p><strong>ref自动解包</strong></p><ul><li>模板中的解包是浅层解包，如果把ref对象放到一个普通对象内部，在模板中使用时将不会自动解包<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123; info.message.value &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> message = ref(<span class="string">&#x27;Hello World&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> info = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        message</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        message,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        info</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>如果我们将ref放到一个reactive的属性当中，那么在模板中使用时，它会自动解包<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123; message &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123; info.message &#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> message = ref(<span class="string">&#x27;Hello World&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> info = reactive(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        message</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        message,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        info</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><ul><li>何时使用？<ul><li>通过<code>reactive</code>或者<code>ref</code>可以获取到一个响应式对象，但如果希望传递给某些组件使用，并且不允许修改时</li></ul></li><li><code>readonly</code>会返回原生对象的只读代理（也就是它依然是一个Proxy，这是一个proxy的set方法被劫持，并且不 能对其进行修改）</li><li>在开发中常见的<code>readonly</code>方法会传入三个类型的参数<ul><li>类型一：普通对象</li><li>类型二：<code>reactive</code>返回的对象</li><li>类型三：<code>ref</code>的对象</li></ul></li><li><code>readonly</code>的使用<ul><li><code>readonly</code>返回的对象都是不允许修改的</li><li>经过<code>readonly</code>处理的原来的对象允许修改，当原对象改变时，<code>readonly</code>返回的对象也会被修改</li><li>本质上就是<code>readonly</code>返回的对象的<code>setter</code>方法被劫持了而已</li></ul></li></ul><h3 id="Reactive判断的API"><a href="#Reactive判断的API" class="headerlink" title="Reactive判断的API"></a>Reactive判断的API</h3><ul><li><strong>isProxy</strong><ul><li>检查对象<font color=red>是否是由reactive 或readonly创建的proxy</font></li></ul></li><li><strong>isReactive</strong><ul><li>检查对象是否<font color=red>是由reactive创建的响应式代理</font></li><li>如果<font color=red>该代理是readonly创建的</font>，<font color=red>但包裹了由reactive 创建的另一个代理</font>，它也会返回true</li></ul></li><li><strong>isReadonly</strong><ul><li>检查对象是否是由readonly创建的只读代理<font color=red></font></li></ul></li><li><strong>toRaw</strong><ul><li>返回<font color=red>reactive 或readonly代理的原始对象</font>（不建议保留对原始对象的持久引用。请谨慎使用）</li></ul></li><li><strong>shallowReactive</strong><ul><li>创建一个响应式代理，它跟踪其自身property 的响应性，但<font color=red>不执行嵌套对象的深层响应式转换</font>(深层还是原生对象)</li></ul></li><li><strong>shallowReadonly</strong><ul><li>创建一个proxy，使其自身的property 为只读，但<font color=red>不执行嵌套对象的深度只读转换</font>（深层还是可读、可写的）</li></ul></li></ul><h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h3><ul><li>如果我们使用<strong>ES6的解构语法</strong>，对<strong>reactive返回的对象进行解构获取值</strong>，那么之后无论是<strong>修改解构后的变量</strong>，还是<strong>修改reactive返回的state对象</strong>， <strong><font color=red>数据都不再是响应式的</font></strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info = reactive(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = info</span><br></pre></td></tr></table></figure></li><li>解决办法<ul><li>Vue为我们提供了一个<font color=red>toRefs的函数</font>，可以将<font color=red>reactive返回的对象中的属性都转成ref</font></li><li>那么我们再次进行解构出来的<font color=red>name 和age 本身都是ref的</font><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们这样写的时候，会返回两个ref对象，他们都是响应式的</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = toRefs(info)</span><br></pre></td></tr></table></figure></li></ul></li><li>这种做法相当于已经在<strong>info.name和ref.value之间建立了链接，任何一个修改都会引起另外一个变化</strong></li></ul><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h3><ul><li>如果只希望转换一个<strong>reactive对象中的属性为ref</strong>, 那么可以使用<strong>toRef方法</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = toRef(info, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> changeName = <span class="function">() =&gt;</span> info.name = <span class="string">&#x27;zs&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="ref的其他API"><a href="#ref的其他API" class="headerlink" title="ref的其他API"></a>ref的其他API</h3><ul><li>unref<ul><li>如果我们想要获取一个ref引用中的value，可以通过unref方法</li><li><font color=red>如果参数是一个ref，则返回内部值，否则返回参数本身</font></li><li>这是<font color=red>val= isRef(val) ? val.value: val</font>的语法糖函数</li></ul></li><li>isRef<ul><li>判断值是否是一个ref对象</li></ul></li><li>shallowRef<ul><li>创建一个浅层的ref对象</li></ul></li><li>triggerRef<ul><li>手动触发和shallowRef相关联的副作用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info = shallowRef(&#123; <span class="attr">name</span>: <span class="string">&#x27;tt&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 下面的修改不是响应式的</span></span><br><span class="line"><span class="keyword">const</span> changeInfo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  info.value.name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">  <span class="comment">// 手动触发</span></span><br><span class="line">  triggerRef(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h3><ul><li>创建一个 <strong>自定义的ref，并对其依赖项跟踪和更新触发进行显式控制</strong><ul><li>它需要一个工厂函数，该函数<font color=red>接收track 和trigger 函数</font>作为参数</li><li>并且应该<font color=red>返回一个带有get 和set 的对象</font></li></ul></li><li>对双向绑定属性进行debounce(节流)的案例:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useDebouncedRef</span>(<span class="params">value, delay = <span class="number">200</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> customRef( <span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        track();</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>( <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          value = newValue;</span><br><span class="line">          trigger()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><strong>使用方式</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> &#123;&#123;msg&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">import</span> &#123; useDebouncedRef &#125; <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useDebounceRef&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> msg = useDebouncedRef(<span class="string">&#x27;Hello World&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        msg</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul><li>当我们的某些属性是依赖其他状态时，可以使用计算属性来处理<ul><li>在前面的Options API中，我们是使用computed选项来完成的</li><li>在Composition API中，我们可以在setup 函数中使用computed 方法来编写一个计算属性</li></ul></li><li>用法<ul><li>方式一：接收一个getter函数，并为getter函数返回的值，返回一个不变的ref 对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> fullName = computed( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> firstName.value + <span class="string">&#x27; &#x27;</span> + lastName.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>方式二：接收一个具有get和set的对象，返回一个可变的（可读写）的ref对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullName = computed(&#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName.value + <span class="string">&#x27; &#x27;</span> + lastName.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> names = newValue.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    firstName.value = names[<span class="number">0</span>];</span><br><span class="line">    lastName.value = names[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="侦听数据的变化"><a href="#侦听数据的变化" class="headerlink" title="侦听数据的变化"></a>侦听数据的变化</h3><ul><li>在前面的Options API中，我们可以通过watch选项来侦听data或者props的数据变化，当数据变化时执行某一些操作</li><li>在Composition API中，我们可以使用watchEffect和watch来完成响应式数据的侦听<ul><li>watchEffect用于自动收集响应式数据的依赖</li><li>watch需要手动指定侦听的数据源</li></ul></li></ul><h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><h5 id="watchEffect用法"><a href="#watchEffect用法" class="headerlink" title="watchEffect用法"></a>watchEffect用法</h5><ul><li>当侦听到某些响应式数据变化时，我们希望执行某些操作，这个时候可以使用watchEffect</li><li>看一个案例<ul><li>首先，watchEffect传入的函数会被立即执行一次，并且在执行的过程中会收集依赖</li><li>其次，只有收集的依赖发生变化时，watchEffect传入的函数才会再次执行<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ref(<span class="string">&#x27;tt&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> age = ref(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">watchEffect( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect执行&#x27;</span>, name.value, age.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="watchEffect的停止侦听"><a href="#watchEffect的停止侦听" class="headerlink" title="watchEffect的停止侦听"></a>watchEffect的停止侦听</h5><ul><li>如果在发生某些情况下，我们希望停止侦听，这个时候我们可以获取watchEffect的返回值函数，调用该函数即可</li><li>比如在上面的案例中，我们age达到20的时候就停止侦听<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stopWatch = watchEffect( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect执行&#x27;</span>, name.value, age.value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeAge = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  age.value++</span><br><span class="line">  <span class="keyword">if</span>(age.value &gt; <span class="number">20</span>)&#123;</span><br><span class="line">    stopWacth()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="watchEffect清除副作用"><a href="#watchEffect清除副作用" class="headerlink" title="watchEffect清除副作用"></a>watchEffect清除副作用</h5><ul><li>什么是清除副作用呢？<ul><li>比如在开发中我们需要在侦听函数中执行网络请求，但是在网络请求还没有达到的时候，我们停止了侦听器，或者侦听器侦听函数被再次执行了</li><li>那么上一次的网络请求应该被取消掉，这个时候我们就可以清除上一次的副作用</li></ul></li><li>在我们给watchEffect传入的函数被回调时，其实可以获取到一个参数：onInvalidate<ul><li>当<strong>副作用即将重新执行</strong>或者<strong>侦听器被停止时</strong>会执行该函数传入的回调函数</li><li>我们可以在传入的回调函数中，执行一些清除工作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stopWatch = watchEffect( <span class="function">(<span class="params">onInValidate</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect执行&#x27;</span>, name.value, age.value)</span><br><span class="line">  <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2s后执行的操作&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">  onInvalidate( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="watchEffect的执行时机"><a href="#watchEffect的执行时机" class="headerlink" title="watchEffect的执行时机"></a>watchEffect的执行时机</h5><ul><li>默认情况下，组件的更新会在副作用函数执行之前<ul><li>能不能在副作用函数中获取到元素呢？<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> titleRef = ref(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    watchEffect( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(titleRef.value)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      titleRef,</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * log:</span></span><br><span class="line"><span class="comment"> * &gt; null</span></span><br><span class="line"><span class="comment"> * &gt; &lt;h2&gt;&lt;/h2&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul></li><li>我们会发现打印结果打印了两次<ul><li>这是因为setup函数在执行时就会立即执行传入的副作用函数，这个时候DOM并没有挂载，所以打印为null</li><li>而当DOM挂载时，会给title的ref对象赋值新的值，副作用函数会再次执行，打印出来对应的元素</li></ul></li></ul><h5 id="调整watchEffect的执行时机"><a href="#调整watchEffect的执行时机" class="headerlink" title="调整watchEffect的执行时机"></a>调整watchEffect的执行时机</h5><ul><li>如果我们希望第一次执行时就能打印出对应的元素<ul><li>这个时候我们需要改变副作用函数的执行时机</li><li>它的默认值是pre，它会在元素挂载或者更新之前执行</li><li>所以我们会先打印出来一个空的，当依赖的title发生改变时，就会再次执行一次，打印出元素</li></ul></li><li>设置副作用函数的执行时机</li><li><code>watchEffect</code>的第二个参数<code>&#123; flush: &#39;&#39; &#125;</code></li><li><code>flush</code>可选值：<code>pre</code>、<code>post</code>，<code>sync</code><ul><li><code>pre</code>：默认。挂载前、更新前</li><li><code>post</code>：将推迟副作用函数的初始运行，直到组件的首次渲染完成才会执行</li><li><code>sync</code>：将强制效果始终同步触发。然而，这是低效的，应该很少需要<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> h2ElContent = <span class="literal">null</span>;</span><br><span class="line">watchEffect( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  h2ElContent = titleRef.value &amp;&amp; titleRef.value.textContent</span><br><span class="line">  <span class="built_in">console</span>.log(h2ElContent, count.value)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><h5 id="watch的使用"><a href="#watch的使用" class="headerlink" title="watch的使用"></a>watch的使用</h5><ul><li>watch的API完全等同于组件watch选项的Property：<ul><li>watch需要侦听特定的数据源，并在回调函数中执行副作用</li><li>默认情况下它是惰性的，只有当被侦听的源发生变化时才会执行回调</li></ul></li><li>与watchEffect的比较，watch允许我们<ul><li>懒执行副作用(第一次不会直接执行)</li><li>更具体的说明当哪些状态发生变化时，触发侦听器的执行</li><li>访问侦听状态变化前后的值</li></ul></li></ul><h5 id="侦听单个数据源"><a href="#侦听单个数据源" class="headerlink" title="侦听单个数据源"></a>侦听单个数据源</h5><ul><li><p>watch侦听的数据源有两种类型：</p><ul><li>一个getter函数： 但是该getter函数必须引用可响应式的对象（ref或reactive）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = reactive(&#123;<span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">watch( <span class="function">() =&gt;</span> info.name, <span class="function">(<span class="params">newVal, oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newVal, <span class="string">&#x27;old:&#x27;</span>, oldVal);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>侦听响应式对象，<code>reactive</code>或者<code>ref</code>(比较常用的是ref)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一： reactive对象获取到的newValue和oldValue本身都是 reactive对象</span></span><br><span class="line">watch(info, <span class="function">(<span class="params">newVal, oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newVal, <span class="string">&#x27;old:&#x27;</span>, oldVal);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/dgy20/picX/master/watch%E4%BC%A0%E5%85%A5reactive%E5%AF%B9%E8%B1%A1.jpg" alt="image text"></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果希望newValue和oldValue是一个普通的对象,可以使用扩展运算符</span></span><br><span class="line">watch(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...info&#125;</span><br><span class="line">&#125;, <span class="function">(<span class="params">newVal, oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newVal, <span class="string">&#x27;old:&#x27;</span>, oldVal);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="侦听多个数据源"><a href="#侦听多个数据源" class="headerlink" title="侦听多个数据源"></a>侦听多个数据源</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = ref(<span class="string">&#x27;TT&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> age = ref(<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    name.value = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//     数组写法        使用多个数组接收新旧值</span></span><br><span class="line">watch([info, name], <span class="function">(<span class="params">[newInfo, newName], [oldInfo, oldName]</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newInfo, <span class="string">&#x27;old:&#x27;</span>, oldInfo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newName, <span class="string">&#x27;old:&#x27;</span>, oldName);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="侦听响应式对象"><a href="#侦听响应式对象" class="headerlink" title="侦听响应式对象"></a>侦听响应式对象</h5><blockquote><p>监听到的对象为reactive对象<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(info, <span class="function">(<span class="params">newInfo, oldInfo</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newInfo, <span class="string">&#x27;old:&#x27;</span>, oldInfo);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>如果希望监听到的对象或数组为普通对象，可以使用一个getter函数，并且对可响应对象进行解构<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = active([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">watch(<span class="function">()=&gt;</span>([...arr]), <span class="function">(<span class="params">newArr, oldArr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newArr, <span class="string">&#x27;old:&#x27;</span>, oldArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="watch的选项"><a href="#watch的选项" class="headerlink" title="watch的选项"></a>watch的选项</h5><ul><li>如果想进行深层侦听，需要在<code>watch</code>的第三个对象参数设置<strong>deep为true</strong></li><li>如果想立即执行一次<code>watch</code>，也可以传入<code>immediate</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = reactive(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//        需要用小括号包裹</span></span><br><span class="line">watch( <span class="function">()=&gt;</span>(&#123;...info&#125;) , <span class="function">(<span class="params">newInfo, oldInfo</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;new:&#x27;</span>, newInfo, <span class="string">&#x27;old:&#x27;</span>, oldInfo);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> changeData = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    info.name = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><blockquote><p>使用直接导入的 onXXX 函数注册生命周期钩子，这些函数接受一个回调函数，当钩子被组件调用时将会被执行</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted, onUpdated, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    onMounted(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;App onMounted&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUpdated( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;App onUpdated&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    onUnmounted( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;App onUnmounted&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">选项式API</th><th align="center">Hook inside <code>setup</code></th></tr></thead><tbody><tr><td align="center"><code>beforeCreate</code></td><td align="center">Not needed*</td></tr><tr><td align="center"><code>created</code></td><td align="center">Not needed*</td></tr><tr><td align="center"><code>beforeMount</code></td><td align="center"><code>onBeforeMount</code></td></tr><tr><td align="center"><code>mounted</code></td><td align="center"><code>onMounted</code></td></tr><tr><td align="center"><code>beforeUpdate</code></td><td align="center"><code>onBeforeUpdate</code></td></tr><tr><td align="center"><code>updated</code></td><td align="center"><code>onUpdated</code></td></tr><tr><td align="center"><code>beforeDestroy</code></td><td align="center"><code>onBeforeUnmount</code></td></tr><tr><td align="center"><code>destroyed</code></td><td align="center"><code>onUnmounted</code></td></tr><tr><td align="center"><code>activated</code></td><td align="center"><code>onActivated</code></td></tr><tr><td align="center"><code>deactivated</code></td><td align="center"><code>onDeactivated</code></td></tr></tbody></table><blockquote><p>TIP<br>因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;/api/***&#x27;</span>).then()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改为直接写在setup 函数内</span></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    axios.get(<span class="string">&#x27;/api/***&#x27;</span>).then()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hook的使用"><a href="#hook的使用" class="headerlink" title="hook的使用"></a>hook的使用</h3><p><strong>实现一个监听界面滚动位置的Hook</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> scrollX = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> scrollY = ref(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    scrollX.value = <span class="built_in">window</span>.scrollX</span><br><span class="line">    scrollY.value = <span class="built_in">window</span>.scrollY</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; scrollX, scrollY &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现一个使用localStorage存储和获取数据的Hook</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = ref(value);</span><br><span class="line">  <span class="comment">// 如果传入了value， 就把key 和 value 存起来</span></span><br><span class="line">  <span class="comment">// 否则就去localStorage里找key对应的值</span></span><br><span class="line">  <span class="keyword">if</span>(value)&#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(value))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data.value = <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(key))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果data的值发生了改变，要把localStorage内对应的值也修改</span></span><br><span class="line">  watch( data, <span class="function">(<span class="params">newValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(newValue))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useScrollPosition, useLocalstorage &#125; <span class="keyword">from</span> <span class="string">&#x27;./hooks&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// scoll</span></span><br><span class="line">    <span class="keyword">let</span> &#123;scrollX, scrollY&#125; = useScrollPosition()</span><br><span class="line">    <span class="comment">// localstorage</span></span><br><span class="line">    <span class="keyword">let</span> data = useLocalstorage(<span class="string">&#x27;info&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> changeData = <span class="function">() =&gt;</span> data.value = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ...useScrollPosition()</span></span><br><span class="line">      scrollX,</span><br><span class="line">      scrollY,</span><br><span class="line">      data,</span><br><span class="line">      changeData</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red></font></p><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><ul><li>父组件传递给子组件：<font color="red">通过props属性</font><blockquote><p>使用<code>v-bind</code>传递给子组件，子组件使用<code>Props</code>接收</p></blockquote></li><li>子组件传递给父组件<font color="red">通过$emit触发事件</font><blockquote><p>需要在子组件中写入一个新的配置项<code>emits</code>接收父组件传递的事件名称</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">increment</span>=<span class="string">&#x27;increment&#x27;</span> @<span class="attr">decrement</span>=<span class="string">&#x27;decrement&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">emits</span>: [ <span class="string">&#x27;increment&#x27;</span>, <span class="string">&#x27;decrement&#x27;</span> ],</span><br><span class="line">    <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; attrs, slots, emit &#125;</span>)</span>&#123;</span><br><span class="line">      <span class="function"><span class="title">addOne</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        emit.increment()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="title">subOne</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        emit.decrement()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="非父子组件的通信"><a href="#非父子组件的通信" class="headerlink" title="非父子组件的通信"></a>非父子组件的通信</h3><h4 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h4><ul><li>Provide/Inject用于非父子组件之间共享数据<ul><li>比如有一些<font color="red">深度嵌套的组件，后代组件想要获取祖先组件的部分内容</font></li><li>在这种情况下，如果我们仍然将props沿着组件链逐级传递下去，就会常的麻烦</li></ul></li><li>这种情况下，可以使用<strong>Provide 和Inject</strong><ul><li>无论层级结构有多深，祖先组件都可以作为其所有后代组件的依赖提供者</li><li>父组件有一个 <code>provide</code> 函数来提供数据</li><li>子组件有一个 <code>inject</code> 函数来接收这些数据</li></ul></li></ul><h5 id="Provide函数"><a href="#Provide函数" class="headerlink" title="Provide函数"></a>Provide函数</h5><ul><li>可以通过<code>provide</code>方法定义每个<code>Property</code></li><li><code>provide</code>接收两个参数<ul><li>key： 提供的属性名称（后代组件接收时的名称）</li><li>value：提供的属性值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">provide(<span class="string">&#x27;counter&#x27;</span>, count)</span><br><span class="line">provide(<span class="string">&#x27;info&#x27;</span>, info)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Inject函数"><a href="#Inject函数" class="headerlink" title="Inject函数"></a>Inject函数</h5><ul><li>在后代组件 中可以通过<code>inject</code> 来注入需要的属性和对应的值</li><li><code>inject</code>可以传入两个参数<ul><li>key：要接收的属性的key</li><li>defaultValue：默认值（可不传）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = inject(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> info = inject(<span class="string">&#x27;info&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="provide-inject-的响应式"><a href="#provide-inject-的响应式" class="headerlink" title="provide/inject 的响应式"></a>provide/inject 的响应式</h5><ul><li>为了增加 <code>provide</code> 值和 <code>inject</code> 值之间的响应性，可以在 <code>provide</code> 值时使用 <code>ref</code> 和 <code>reactive</code></li><li>未防止后代组件修改值，可在<code>provide</code>传递时使用<code>readonly</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ref(<span class="string">&#x27;TT&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> info = reactive(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;TT&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">provide(<span class="string">&#x27;name&#x27;</span>, readonly(name))</span><br><span class="line">provide(<span class="string">&#x27;info&#x27;</span>, readonly(info))</span><br></pre></td></tr></table></figure></li><li>后代组件需要修改<code>inject</code>接收到的值时，要遵守<strong>单向数据流原则</strong>，可以将修改的方法在祖先组件中定义，在后代组件中调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 祖先组件 *******/</span></span><br><span class="line">  <span class="keyword">let</span> name = ref(<span class="string">&#x27;TT&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> changeName = <span class="function">() =&gt;</span> &#123; name.value = <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line">  provide(<span class="string">&#x27;name&#x27;</span>, readonly(name))</span><br><span class="line">  provide(<span class="string">&#x27;changeName&#x27;</span>, changeName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/***** 后代组件 *******/</span></span><br><span class="line">  <span class="keyword">let</span> changeName = inject(<span class="string">&#x27;changeName&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> emitChangeName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      changeName()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="全局事件总线mitt库"><a href="#全局事件总线mitt库" class="headerlink" title="全局事件总线mitt库"></a>全局事件总线mitt库</h4><ul><li>Vue3从实例中移除了$on、$off 和$once 方法，所以我们如果希望继续使用全局事件总线，要通过第三方的库<ul><li>Vue3官方有推荐一些库，例如<a class="link"   href="https://github.com/developit/mitt" >mitt<i class="fas fa-external-link-alt"></i></a>或<a class="link"   href="https://github.com/scottcorgan/tiny-emitter" >tiny-emitter<i class="fas fa-external-link-alt"></i></a></li></ul></li><li>封装一个通信工具库<code>eventbus.js</code>:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&#x27;mitt&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emitter = mitt();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter;</span><br></pre></td></tr></table></figure></li><li>使用方式</li></ul><p><strong>监听</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;./eventBus&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 监听单个事件</span></span><br><span class="line">    emitter.on(<span class="string">&#x27;tt&#x27;</span>, <span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;tt event:&#x27;</span>， info)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 监听所有事件</span></span><br><span class="line">    emitter.on(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">type, e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;* event:&#x27;</span>, type, e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>触发事件总线</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&#x27;./eventBus&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> triggerEvent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      emitter.emit(<span class="string">&#x27;tt&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&#x27;tt&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>取消监听</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取消所有监听</span></span><br><span class="line">emitter.all.clear()</span><br><span class="line"><span class="comment">// 如果只想取消某一个事件的监听，要把on监听的回调函数单独定义，例：</span></span><br><span class="line"><span class="function"><span class="title">watchFoo</span>(<span class="params">data</span>)</span>&#123;&#125;</span><br><span class="line">emitter.on(<span class="string">&#x27;foo&#x27;</span>, watchFoo)</span><br><span class="line">emitter.off(<span class="string">&#x27;foo&#x27;</span>, watchFoo)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
    <category term="vue3" scheme="https://uihh.cn/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>sync修饰符</title>
    <link href="https://uihh.cn/2021/08/27/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://uihh.cn/2021/08/27/sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2021-08-27T08:42:30.000Z</published>
    <updated>2022-01-11T03:45:36.074Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><p><b>Vue中的.sync修饰符</b></p><blockquote><p>   在Vue中，子父组件组常用的通信方式就是通过 props 进行数据传递，props 值只能在父组件更新并传递给子组件，在子组件内部是不允许改变传递进来的 props 值，这样做是为了保证数据的单向流通。但有时候，需要在子组件内部改变 props 属性值并更新到组件中，这时就需要用到<code>.sync</code>修饰符</p></blockquote><p>sync修饰符做了两件事</p><ul><li>声明要传递的数据</li><li>声明自定义事件<br><code>:title.sync</code>就是<code>:title=&quot;title&quot; @update:title=&quot;title=$event&quot;</code>的缩写</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;child :title.sync=&quot;title&quot;&gt;&lt;/child&gt;</span><br><span class="line">等同于</span><br><span class="line">&lt;child :title=&quot;title&quot; @update:title=&quot;title = $event&quot;&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;doc&quot;&gt;</span><br><span class="line">  &lt;h1 class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeTitle&quot;&gt;修改标题&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">/**************************************************/</span><br><span class="line">props: &#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  changeTitle() &#123;</span><br><span class="line">    this.$emit(&quot;update:title&quot;, &quot;新标题&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><b style="color:#000">若要传递的值为一个对象下的多个值，可以通过<code>v-bind.sync=&quot;doc&quot;</code>将对象中每个值分别传给子组件</b></p><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind.sync</span>=<span class="string">&quot;doc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">doc</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">title</span>: <span class="string">&quot;初始标题&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">content</span>: <span class="string">&quot;初始内容&quot;</span>,</span></span><br><span class="line"><span class="javascript">      &#125;,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;doc&quot;&gt;</span><br><span class="line">  &lt;h1 class=&quot;title&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;&#123;&#123; content &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeContent&quot;&gt;修改标题&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">/**************************************************/</span><br><span class="line">props: &#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">  &#125;,</span><br><span class="line">  content:&#123;</span><br><span class="line">    type: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  changeContent() &#123;</span><br><span class="line">    this.$emit(&quot;update:content&quot;, &quot;新内容&quot;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
    <category term="修饰符" scheme="https://uihh.cn/tags/%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli笔记</title>
    <link href="https://uihh.cn/2021/08/16/Vue-cli%E7%AC%94%E8%AE%B0/"/>
    <id>https://uihh.cn/2021/08/16/Vue-cli%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-16T02:00:34.000Z</published>
    <updated>2022-02-09T09:20:56.169Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能+模板编译器</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js-配置文件"><a href="#vue-config-js-配置文件" class="headerlink" title="vue.config.js 配置文件"></a>vue.config.js 配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a class="link"   href="https://cli.vuejs.org/zh/config/" >https://cli.vuejs.org/zh/config/<i class="fas fa-external-link-alt"></i></a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息(id的替代者)</li><li>应用在html标签上获取的是真实dom元素， 应用在组件标签上是组件实例对象</li><li>使用方式<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li>功能：让组件接收外部传过来的数据</li><li>传递数据： <code>&lt;demo :name=&quot;xxx&quot;&gt;</code></li><li>接收数据：<ol><li>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></li><li>第二种方式（限制类型）： <code>props:&#123;name:&#39;String&#39;&#125;</code></li><li>第三种方式（限制类型、限制必要性、指定默认值）： <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span>,<span class="comment">// 必要性</span></span><br><span class="line">    <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span><span class="comment">// 默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>可接受的类型<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- String</span><br><span class="line">- Number</span><br><span class="line">- Boolean</span><br><span class="line">- Array</span><br><span class="line">- Object</span><br><span class="line">- Date</span><br><span class="line">- Function</span><br><span class="line">- Symbol</span><br></pre></td></tr></table></figure><blockquote><p>备注： props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若确实需要修改，可复制一份props的内容到data中，然后修改data中的数据</p></blockquote></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li>功能：可以把多个组件共用的配置提取成一个混入对象</li><li>使用方式：<br> 第一步定义混合： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   data()&#123;&#125;,</span><br><span class="line">   methods:&#123;&#125;,</span><br><span class="line">   ... ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>第二部使用混入：<br>全局混入：<code>Vue.mixin(xxx)</code><br>局部混入：<code>mixins:[&#39;xxx&#39;]</code></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li>功能：用于增强Vue</li><li>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</li><li>定义插件：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">install</span>(<span class="params">Vue, options</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    Vue.filter(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    Vue.directive(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    Vue.mixin(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">    Vue.prototype.$myProperty = xxxx</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用插件：<code>Vue.use(xxx)</code></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="组件拆分案例"><a href="#组件拆分案例" class="headerlink" title="组件拆分案例"></a>组件拆分案例</h2><ol><li>组件化编码流程<br> (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突<br> (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<pre><code> 1). 一个组件在用，放在自身即可。 2). 多个组件在用：放在他们共同的父组件上（&lt;span style=&quot;color:red&quot;&gt;状态提升&lt;/span&gt;）</code></pre> (3).实现交互： 从绑定开始</li><li>props适用于：<br> (1). 父组件 ==&gt; 子组件 通信<br> (2). 子组件 =&gt;&gt; 父组件 通信（需要父组件先给子组件一个函数，子组件调用时传参）</li><li>使用<code>v-model</code>时要切记： <code>v-model</code>绑定的值不能是props传过来的值，因为props不可修改</li><li>props传过来的若是对象的值，修改对象中的属性是Vue不会报错，但不推荐这样做</li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器之间可能会有区别）</p></li><li><p>浏览器端通过 <code>window.sessionStorage</code> 和 <code>window.localStorage</code>属性实现本地存储机制</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br> 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code><br> ​该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code><br> ​该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code><br> ​该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器的窗口关闭而消失</li><li>LocalStorage存储的内容，需要手动清除才会消失</li><li><code>xxxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null</li><li><code>JSON.parse(null)</code> 的结果依然是null</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方法，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景： A是父组件，B是子组件，B想给A传递数据，就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li>第一种方法，在父组件中：<code>&lt;Demo @children=&quot;parent&quot; /&gt;</code></li><li>第二种方法，在父组件中：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span> /&gt;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;子组件事件名&#x27;</span>,<span class="built_in">this</span>.getData<span class="comment">/*父组件自己的方法*/</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>若只想让自定义事件触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法</li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;事件名&#39;,要传递的数据)</code></p></li><li><p>解绑自定义事件：<code>this.$off(&#39;事件名&#39;)</code></p></li><li><p>组件上也可以绑定原生的dom事件，需要用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;子组件事件名&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线-GlobalEventBus"><a href="#全局事件总线-GlobalEventBus" class="headerlink" title="全局事件总线(GlobalEventBus)"></a>全局事件总线(GlobalEventBus)</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span></p></li><li><p>安装全局事件总线：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  ....,</span><br><span class="line">  <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线, $bus就是当前应用的vm</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身</span></li><li>提供数据： <code>this.$bus.$emit(&#39;tt&#39;,数据)</code></li></ol></li><li><p>最好在beforeDestroy钩子中，用<code>$off</code>去解绑<span style="color:red">当前组件所用到的</span>事件。</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A组件</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params">data</span>)</span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;tt&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$off(<span class="string">&quot;tt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B组件</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.$bus.$emit(<span class="string">&#x27;tt&#x27;</span>,params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span></p></li><li><p>使用步骤:</p><ol><li>安装pubsub：<code>npm i  pubsub-js</code></li><li>引入：<code>import pubsub from &#39;pubsub-js&#39;</code></li><li>接收数据：A组件想接受的数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></li><li>提供数据： <code>pubsub.publish(&#39;xxx&#39;, 数据)</code></li><li>最好在beforeDestroy钩子中,用<code>pubsub.unsubscribe(this.pid)</code>去<span style="color:red">取消订阅。</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A组件</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="comment">// 第一个参数是订阅事件的名字</span></span><br><span class="line">  <span class="function"><span class="title">demo</span>(<span class="params"><span class="string">&#x27;aaa&#x27;</span>,data</span>)</span>&#123; ... &#125;</span><br><span class="line">&#125;,</span><br><span class="line">... ...</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;aaa&#x27;</span>,<span class="built_in">this</span>.demo) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  pubsub.unsubscribe(<span class="built_in">this</span>.pid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B组件</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    pubsub.publish(<span class="string">&#x27;aaa&#x27;</span>,params)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法： <code>this.$nextTick(callback)</code></li><li>作用： 在下一次 dom 更新结束后执行其指定的回调函数</li><li>什么时候用： 当改变数据后，要给予更新后的 dom 进行某些操作时，要在nextTick所指定的回调函数中执行</li></ol><h2 id="Vue封装的过渡与动画"><a href="#Vue封装的过渡与动画" class="headerlink" title="Vue封装的过渡与动画"></a>Vue封装的过渡与动画</h2><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><ul><li>原理<ol><li>自动查看目标元素是否应用了CSS过渡或动画，如果有，那么在恰当的时机添加/删除CSS类名</li><li>如果<code>trnasition</code>组件提供了JavaScript钩子函数，这些钩子函数将在恰当的时机被调用</li><li>如果没有找到JavaScript钩子并且也没有检测到CSS过渡/动画，DOM插入、删除操作会立即执行</li></ol></li></ul><blockquote><p><code>v-enter-from</code>: 定义过度开始的状态，在元素被插入之前生效，在元素被插入之后的下一帧移除</p><p><code>v-enter-active</code>: 定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间、延迟和曲线函数</p><p><code>v-enter-to</code>: 定义进入过渡的结束状态。在元素被插入之后下一帧生效(此时<code>v-enter-from</code>)被移除，在过渡/动画完成之后移除</p><p><code>v-leave-from</code>: 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧移除</p><p><code>v-leave-active</code>: 定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过度被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间、延迟和曲线函数</p><p><code>v-leave-to</code>: 离开过渡的结束状态。在离开过渡被触发之后下一帧生效(此时<code>v-leave-from</code>被删除)，在过渡/动画完成之后移除</p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;tt&quot;&gt;</span><br><span class="line">    &lt;h2 v-if=&quot;isShow&quot;&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .tt-enter-from,</span><br><span class="line">    .tt-leave-to&#123;</span><br><span class="line">        // 变化效果</span><br><span class="line">        opacity: 0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .tt-enter-to,</span><br><span class="line">    .tt-leave-from&#123;</span><br><span class="line">        // 变化效果</span><br><span class="line">        opacity: 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .tt-enter-active,</span><br><span class="line">    .tt-leave-active&#123;</span><br><span class="line">        transition: opacity 1s;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>class的name命名规则<ul><li>如果使用的是一个没有name的transition。那么所有class都是以<code>v-</code>作为默认前缀</li><li>如果我们添加了一个name属性，比如<code>&lt;transition name=&quot;tt&quot;&gt;</code>,那么所有的class都会以<code>tt-</code>开头</li></ul></li></ul><h3 id="自定义过渡class"><a href="#自定义过渡class" class="headerlink" title="自定义过渡class"></a>自定义过渡class</h3><blockquote><p>自定义class的优先级高于普通的类名，可以使用第三方动画库的类名。 使用Animate.css 需要手动加上 <code>animate__animated</code> 动画时间类名 </p></blockquote><ul><li><p><code>enter-from-class</code></p></li><li><p><code>enter-active-class</code></p></li><li><p><code>enter-to-class</code></p></li><li><p><code>leave-from-class</code></p></li><li><p><code>leave-active-class</code></p></li><li><p><code>leave-to-class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition </span><br><span class="line">   enter-active-class=&quot;animate__animated animate__backInDown&quot; </span><br><span class="line">   leave-active-class=&quot;animate__animated animate__backOutUp&quot;&gt;</span><br><span class="line">      &lt;h2 v-if=&quot;isShow&quot;&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="js动画钩子"><a href="#js动画钩子" class="headerlink" title="js动画钩子"></a>js动画钩子</h3><ul><li><code>before-enter</code></li><li><code>enter</code></li><li><code>after-enter</code></li><li><code>before-leave</code></li><li><code>leave</code></li><li><code>after-leave</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">    @before-enter=&quot;beforeEnter&quot;</span><br><span class="line">    @enter=&quot;enter&quot;</span><br><span class="line">    @after-enter=&quot;afterEnter&quot;</span><br><span class="line">    @before-leave=&quot;beforeLeave&quot;</span><br><span class="line">    @leave=&quot;Leave&quot;</span><br><span class="line">    @after-leave=&quot;afterLeave&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;h2 v-if=&quot;isShow&quot;&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>  在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span>  <span class="comment">// 要访问的接口地址(只写到端口)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求时</span></span><br><span class="line">axios.get(<span class="string">&quot;/school&quot;</span>).then()</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端(8080)即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>  编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>:&#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;  <span class="comment">//匹配所有以&#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;  <span class="comment">//匹配所有以&#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>:<span class="string">&#x27;http://localhost:5001&#x27;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">    changeOrigin设置为false时，服务器收到的请求头中的host为：localhost：8080</span></span><br><span class="line"><span class="comment">    changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 发送请求时</span></span><br><span class="line">axios.get(<span class="string">&quot;/api/students&quot;</span>).then()</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活地控制请求是否走代理</li><li>配置略为繁琐。请求资源时必须要加前缀</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;div&gt;html结构&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;!-- 定义插槽 --&gt;</span><br><span class="line">                &lt;slot&gt;默认值，当使用者没有传递具体结构时，标签内的内容会展示在页面上&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;a&quot;&gt;</span><br><span class="line">                &lt;div&gt;html结构&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">            &lt;template slot:b&gt;</span><br><span class="line">                &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;!-- 定义插槽 --&gt;</span><br><span class="line">                &lt;slot name=&quot;a&quot;&gt;默认值，当使用者没有传递具体结构时，标签内的内容会展示在页面上&lt;/slot&gt;</span><br><span class="line">                &lt;slot name=&quot;b&quot;&gt;默认值，当使用者没有传递具体结构时，标签内的内容会展示在页面上&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用节决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由父组件决定）</li><li>具体代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;!-- scope 是一个对象，里面存放着子组件通过插槽传过来的数据 --&gt;</span><br><span class="line">            &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;game in scopeData.games&quot; :key=&quot;game&quot;&gt; &#123;&#123;game&#125;&#125; &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;!-- 接收数据时可使用解构语法 --&gt;</span><br><span class="line">            &lt;template scope=&quot;&#123; games &#125;&quot;&gt;</span><br><span class="line">                &lt;h4 v-for=&quot;game in games&quot; :key=&quot;game&quot;&gt; &#123;&#123;game&#125;&#125;&lt;/h4&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">          export default&#123;</span><br><span class="line">            name:&#x27;Category&#x27;,</span><br><span class="line">            data()&#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                games:[&quot;双人成行&quot;, &quot;小小梦魇&quot;, &quot;冒险岛&quot;, &quot;魂斗罗&quot;]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>  在Vue中实现集中式状态（数据）管理的一个Vue插件，对Vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信</p><h3 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h3><p>  多个组件需要共享数据时</p><h3 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h3><ol><li>创建文件：<code>src/store/index.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions对象 ———— 响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;;</span><br><span class="line"><span class="comment">// 准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;;</span><br><span class="line"><span class="comment">// 准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在<code>main.js</code>中创建vm时传入<code>store</code>配置项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)，</span><br><span class="line">  store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>stroe/index.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex</span></span><br><span class="line">Vue.ues(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// 响应组件中加法的动作</span></span><br><span class="line">  <span class="function"><span class="title">jia</span>(<span class="params">context, value</span>)</span>&#123;</span><br><span class="line">    context.commit(<span class="string">&#x27;JIA&#x27;</span>,value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="function"><span class="title">JIA</span>(<span class="params">state,value</span>)</span>&#123;</span><br><span class="line">    state.sum += value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  mutations,</span><br><span class="line">  state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>组件中读取vuex中的数据：<code>$store.state.num</code></li><li>组件中修改vuex中的数据：<code>$store.dispatch(&#39;actions中的方法&#39;, 数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;, 数据)</code><blockquote><p>备注：若没有网络请求或其他业务逻辑，可以越过<code>actions</code>直接调用<code>mutations</code>，即不写<code>dispatch</code>,直接调用<code>commit</code></p></blockquote></li></ol><h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><ol><li>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</li><li>在<code>store.js</code>中追加<code>getters</code>配置<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="function"><span class="title">bigNum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state.num * <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  ......</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>组件中读取数据：<code>$store.getters.bigNum</code></li></ol><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">// 借助mapState生成计算属性：num、school、subject（对象写法）</span></span><br><span class="line">  ...mapState(&#123;<span class="attr">num</span>:<span class="string">&#x27;num&#x27;</span>, <span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>, <span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">  <span class="comment">// 借助mapState生成计算属性：num、school、subject（数组写法）</span></span><br><span class="line">  ...mapState([<span class="string">&#x27;num&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">// 借助mapGetters生成计算属性: bigNum(对象写法)</span></span><br><span class="line">  ...mapGetters(&#123;<span class="attr">bigNum</span>:<span class="string">&#x27;bigNum&#x27;</span>&#125;)</span><br><span class="line">  <span class="comment">// 借助mapGetters生成计算属性: bigNum(数组写法)</span></span><br><span class="line">  ...mapGetters([<span class="string">&#x27;bigNum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于生成与<code>actions</code>对话的方式，即包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">// 靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">  ...mapActions(&#123; <span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>, <span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// 靠mapActions生成：jiaOdd、jiaWait（数组形式）</span></span><br><span class="line">  ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>, <span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于生成与<code>mutations</code>对话的方法，即包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">...mapMutations(&#123; <span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>, <span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">...mapMutations([ <span class="string">&#x27;JIA&#x27;</span>, <span class="string">&#x27;JIAN&#x27;</span> ])</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，如果要传递参数 <span style="color:#f0a">需要在模板中绑定事件时传递参数</span>，否则参数是事件对象。</p></blockquote><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化 + 命名空间"></a>模块化 + 命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改: <code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// 开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">bigNum</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">// 开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>:&#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.personAbout.list</span><br><span class="line"><span class="comment">// 方式二：借助mapState读取：</span></span><br><span class="line">...mapState(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;num&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：自己直接读取</span></span><br><span class="line"><span class="comment">//                    命名空间名  /  属性名</span></span><br><span class="line"><span class="built_in">this</span>.$store.getters[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">// 方式二：借助mapGetters读取：</span></span><br><span class="line">...mapGetters(<span class="string">&#x27;countAbout&#x27;</span>, [<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="comment">//                      命名空间名  /  方法名       , 参数</span></span><br><span class="line"> <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"> <span class="comment">//方式二：借助mapActions：</span></span><br><span class="line"> ...mapActions(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="comment">//                    命名空间名  /  方法名    , 参数</span></span><br><span class="line"> <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"> <span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line"> ...mapMutations(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解：一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li>安装vue-router ：<code>npm i vue-router</code></li><li>main.js中引入VueRouter: <code>import VueRouter from &#39;vue-router&#39;</code></li><li>应用插件：<code>Vue.use(VueRouter)</code></li><li>编写router配置项：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  src/router/index.js</span></span><br><span class="line"><span class="comment">  该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入路由 组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  <span class="attr">routes</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:About</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li>实现切换（active-class可配置高亮样式）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>指定展示位置<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h3><ol><li>路由组件通常放在<code>pages/views</code>文件夹，一般组件通常放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="多级路由（多级路由）"><a href="#多级路由（多级路由）" class="headerlink" title="多级路由（多级路由）"></a>多级路由（多级路由）</h3><ol><li>配置路由规则，使用children配置项：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:About</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:Home,</span><br><span class="line">    <span class="attr">children</span>:[  <span class="comment">// 通过children配置子集路由</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,  <span class="comment">// 子级路由一定不要写斜线，不要写成&#x27;/news&#x27;</span></span><br><span class="line">        <span class="attr">component</span>: News</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>, <span class="comment">// 子级路由一定不要写斜线!!!</span></span><br><span class="line">        <span class="attr">component</span>: Message</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li>跳转（要写完整的路径,从一级路由一级一级向下找）：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/news&quot;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h3><ol><li>传递参数<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home/message/detail?id=666&amp;msg=hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">    path:&#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">    query:&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      id:666,</span></span></span><br><span class="line"><span class="string"><span class="tag">      msg:&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>接受参数：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.query.id</span><br><span class="line">$route.query.msg</span><br></pre></td></tr></table></figure><span style="color:red">特别注意：若传递的参数是对象，页面刷新后数据会丢失，传参时可以使用<code>JSON.stringify()</code>避免该问题</span>, 普通值不会丢失</li></ol><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ol><li>作用：可以简化路由的跳转</li><li>如何使用</li><li>给路由命名：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:Demo,</span><br><span class="line">  <span class="attr">children</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:Test,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,  <span class="comment">// 给路由命名</span></span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: Hello</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>简化跳转<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 简化前，需要写完整路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&#123;</span><br><span class="line">    name:&#x27;hello&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:666,</span><br><span class="line">      msg:&#x27;hello&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h3><ol><li>配置路由，声明接收params参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:Home,</span><br><span class="line">  <span class="attr">children</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:News</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:Message,</span><br><span class="line">      <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">          <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:msg&#x27;</span>,  <span class="comment">// 使用占位符声明接收params参数</span></span><br><span class="line">          <span class="attr">component</span>: Detail</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>传递参数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params写法，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/hello&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params写法，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link</span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name:&#x27;detail&#x27;,</span><br><span class="line">    params:&#123;</span><br><span class="line">      id:666,</span><br><span class="line">      msg:&#x27;hello&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意： 路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置项</p></blockquote></li><li>接收参数：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.msg</span><br></pre></td></tr></table></figure><span style="color:red">特别注意：若传递的参数是对象，页面刷新后数据会丢失，传参时可以使用<code>JSON.stringify()</code>避免该问题</span>, 普通值不会丢失</li></ol><h3 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h3><p>  作用：让路由组件更方便的接收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>:Detail,</span><br><span class="line">  <span class="comment">// 第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">  <span class="comment">//  props: &#123; a:1 &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">  <span class="comment">// 缺点: 不能接受query参数</span></span><br><span class="line">  <span class="comment">// props: true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">  <span class="function"><span class="title">props</span>(<span class="params">route</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">id</span>:route.query.id,</span><br><span class="line">      <span class="attr">msg</span>: route.query.msg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* props(&#123; query &#125;) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;</span></span><br><span class="line"><span class="comment">      id: query.id,</span></span><br><span class="line"><span class="comment">      title: query.title</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">  <span class="comment">/* // 解构赋值连续写法</span></span><br><span class="line"><span class="comment">  props(&#123; query: &#123; id, title &#125; &#125;) &#123;</span></span><br><span class="line"><span class="comment">    return &#123;</span></span><br><span class="line"><span class="comment">      id: id,</span></span><br><span class="line"><span class="comment">      title: title</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lt-router-link-gt-的replace属性"><a href="#lt-router-link-gt-的replace属性" class="headerlink" title="&lt;router-link&gt; 的replace属性"></a><code>&lt;router-link&gt;</code> 的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写法： 分别为<code>push</code>和<code>replace</code>，<code>push</code> 是追加历史记录，<code>replace</code>是替换当前记录。路由跳转的时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式： <code>&lt;router-link replace ......&gt;跳转&lt;/router-link&gt;</code></li></ol><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><ol><li>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更灵活</li><li>具体编码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $router 的API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">// 前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back()  <span class="comment">// 后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go()  <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><ol><li>作用：让不展示的路由组件保持挂载，不被销毁</li><li>具体编码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include=&quot;组件名(组件name保存的名字)&quot;&gt;</span><br><span class="line">  &lt;组件名&gt;&lt;/组件名&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">include: string | RegExp| Array。只有名称匹配的组件会被缓存；</span><br><span class="line">exclude: string | RegExp| Array。任何名称匹配的组件都不会被缓存；</span><br><span class="line">max: number | string。最多可以缓存多少组件实例，一旦达到这个数字，那么缓存组件中最近没有被访问的实例会被销毁</span><br></pre></td></tr></table></figure></li><li>缓存组件独有的生命周期，用于捕获路由组件的激活状态</li><li><code>activated</code> 组件激活时触发的钩子</li><li><code>deactivated</code> 组件失活时触发的钩子</li></ol><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ol><li>作用： 对路由进行权限控制</li><li>分类： 全局守卫、独享守卫、组件内守卫</li><li>全局守卫：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js 文件内编写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.beforeEach( <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.isAuth)&#123;  <span class="comment">// 判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="comment">// 逻辑操作</span></span><br><span class="line">    next() <span class="comment">// 放行</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next(&#123;<span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>&#125;)  <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// throw new Error()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局后置守卫： 初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.afterEach( <span class="function">(<span class="params">to, <span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">//  to : 到哪去 ； from 从哪来   </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;afterEach&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.title)&#123;  <span class="comment">// 判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="built_in">document</span>.title = to.meta.title  <span class="comment">// 修改网页的title</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>独享守卫：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js 文件内编写</span></span><br><span class="line"><span class="function"><span class="title">beforeEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">  <span class="keyword">if</span>(to.meta.isAuth)&#123;  <span class="comment">// 判断当前路由是否需要进行权限控制</span></span><br><span class="line">    <span class="comment">// 逻辑操作</span></span><br><span class="line">    next() <span class="comment">// 放行</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    next(&#123;<span class="attr">name</span>:<span class="string">&#x27;home&#x27;</span>&#125;)  <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// throw new Error()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>组件内守卫：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h3><ol><li>对于一个url来说，什么事hash值？ ———— #及其后面的内容就是hash值</li><li>hash值不会包含在HTTP请求中，即：hash值不会带给服务器</li><li>hash模式：<ol><li>地址中带有#号，不美观</li><li>若以后将地址通过第三方手机app分享，如果app校验严格，则地址会被标记为不合法</li><li>兼容性较好</li></ol></li><li>history模式：<ol><li>url地址没有 #</li><li>兼容性与hash模式相比略差</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404问题</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
    <category term="Vue-cli笔记" scheme="https://uihh.cn/tags/Vue-cli%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue笔记</title>
    <link href="https://uihh.cn/2021/08/10/Vue%E7%AC%94%E8%AE%B0/"/>
    <id>https://uihh.cn/2021/08/10/Vue%E7%AC%94%E8%AE%B0/</id>
    <published>2021-08-10T10:52:14.000Z</published>
    <updated>2022-01-11T03:45:36.071Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h2 id="编码时需要注意的问题"><a href="#编码时需要注意的问题" class="headerlink" title="编码时需要注意的问题"></a>编码时需要注意的问题</h2><ol><li>被Vue管理的函数最好写成普通函数，以保证this的指向是vm或组件的实例对象</li><li>不被Vue管理的函数（定时器的回调函数、ajax的回调函数、Promise的回调函数等），最好写成箭头函数，这样this的指向才是vm或组件的实例对象</li></ol><h2 id="Vue中的MVVM模型"><a href="#Vue中的MVVM模型" class="headerlink" title="Vue中的MVVM模型"></a>Vue中的MVVM模型</h2><ol><li><p>M: 模型(Model): data中的数据</p></li><li><p>V: 视图(View) : 模板代码</p></li><li><p>VM: 视图模型(ViewModel) : Vue实例</p></li></ol><p>结果: ① data中所有的属性,最后都出现在了Vue的实例vm身上;</p><p>   ② vm身上所有的属性及Vue原型上所有的属性,在Vue的模板中都可以直接使用</p><h2 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h2><ol><li>Vue中的数据代理是通过vm对象代理data对象中属性的操作(读/写)</li><li>基本原理：</li></ol><pre><code>① 通过Object.defineProperty()把data对象中所有属性添加到vm上。② 为每一个添加到vm上的属性，都指定一个getter/setter。③ 在getter/setter内部去操作(读/写) data中对应的数据</code></pre><h2 id="Vue中的事件"><a href="#Vue中的事件" class="headerlink" title="Vue中的事件"></a>Vue中的事件</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><ol><li>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名。</li><li>事件的回调需要配置在methods对象中，最终会在vm上。</li><li>methods中配置的函数，不要用箭头函数！否则this就不指向vm了。</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象。</li><li>@click=”demo” 和 @click=”demo($event)” 效果一致，但后者可以传其他参数。</li></ol><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><ol><li>prevent：阻止默认事件</li><li>stop：阻止事件冒泡</li><li>once：事件只触发一次</li><li>capture：使用事件的捕获模式</li><li>self：只有event.target是当前操作的元素时才触发事件</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ol><h3 id="键盘事件（常用的按键别名）"><a href="#键盘事件（常用的按键别名）" class="headerlink" title="键盘事件（常用的按键别名）"></a>键盘事件（常用的按键别名）</h3><blockquote><p>回车 =&gt; enter<br>  删除 =&gt; delete (捕获“删除”和“退格”键)<br>  退出 =&gt; esc<br>  空格 =&gt; space<br>  换行 =&gt; tab (特殊，必须配合keydown去使用)<br>  上 =&gt; up<br>  下 =&gt; down<br>  左 =&gt; left<br>  右 =&gt; right</p></blockquote><h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性<code>computed</code></h2><blockquote><ol><li>用途： 要使用的数据需要通过已有的属性加工后得来</li><li>原理：底层借助了Objcet.defineproperty方法提供的getter和setter</li><li>get函数什么时候执行？<br> (1).初次读取时会执行一次<br> (2).当依赖的数据发生改变时会被再次调用</li><li>与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</li><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="attr">fullName</span>:&#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>,value)</span><br><span class="line">    <span class="keyword">const</span> arr = value.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.firstName = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">this</span>.lastName = arr[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line"><span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监视属性watch"><a href="#监视属性watch" class="headerlink" title="监视属性watch"></a>监视属性<code>watch</code></h2><ol><li>当被监视的属性存在变化时，回调函数自动调用，进行相关操作</li><li>watch默认不监测对象内部值得改变，可通过配置<code>deep:true</code>监测深层数据的变化<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isHot</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">  <span class="comment">// 完整写法</span></span><br><span class="line">  <span class="attr">isHot</span>:&#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,  <span class="comment">// 初始化时执行一次回调函数</span></span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,  <span class="comment">// 开启深度监听</span></span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">      <span class="comment">/* 函数体逻辑 */</span></span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  <span class="function"><span class="title">isHot</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 函数体逻辑 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="computed和watch之间的区别"><a href="#computed和watch之间的区别" class="headerlink" title="computed和watch之间的区别"></a>computed和watch之间的区别</h2><p><code>compouted</code>能完成的功能，<code>watch</code>都可以完成。<code>watch</code>能完成的<code>computed</code>不一定能完成，例如：watch可以发送异步请求</p><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><h3 id="class样式"><a href="#class样式" class="headerlink" title="class样式"></a>class样式</h3><ul><li>写法：<code>:class=&#39;xxx&#39;</code>xxx可以是字符串、数组、对象<ul><li>字符串写法适用于：类名不确定，要动态获取。</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ul></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;mood +&#x27; &#x27;+ font&quot;</span>&gt;字符串写法&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>对象写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">mood</span>: <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">      <span class="attr">font</span>: <span class="string">&#x27;font&#x27;</span>,</span><br><span class="line">      <span class="attr">classArr</span>: [<span class="string">&#x27;class1&#x27;</span>, <span class="string">&#x27;class2&#x27;</span>, <span class="string">&#x27;class3&#x27;</span>],</span><br><span class="line">      <span class="attr">classObj</span>: &#123;</span><br><span class="line">        <span class="attr">class1</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">class2</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="style样式"><a href="#style样式" class="headerlink" title="style样式"></a>style样式</h3><ul><li>写法: <code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code>  或 <code>:style=&quot;[a,b]&quot;</code> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;font-size:40px&#125;&quot;</span>&gt;</span>对象写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[&#123;font-size:40px&#125;,&#123;color:#000&#125;]&quot;</span>&gt;</span>数组写法<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><pre><code>写法：  (1).v-if=&quot;表达式&quot;   (2).v-else-if=&quot;表达式&quot;  (3).v-else=&quot;表达式&quot;适用于：切换频率较低的场景。特点：不展示的DOM元素直接被移除。注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”</code></pre><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><pre><code>写法：v-show=&quot;表达式&quot;适用于：切换频率较高的场景。特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</code></pre><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>v-for指令：</p><ol><li>用于展示列表数据</li><li>语法： <code>v-for=&quot;(item, index) in xxx&quot; :key:&quot;yyy&quot;</code>    3. 可用于遍历 数组、对象、字符串、指定次数      </li></ol><h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><blockquote><p>收集表单数据：<br>  若：<code>&lt;input type=&quot;text&quot;/&gt;</code>    <input type="text" style="width:30px"/>，则v-model收集的是value值，用户输入的就是value值。<br>  若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>    <input type="radio"/>，则v-model收集的是value值，且要给标签配置value值。<br>  若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code>    <input type="checkbox"/><br>      1.没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>      2.配置input的value属性:<br>      &emsp;&emsp;(1).v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）<br>      &emsp;&emsp;(2).v-model的初始值是数组，那么收集的的就是value组成的数组</p></blockquote><p>  备注：v-model的三个修饰符：</p><ul><li>lazy：失去焦点再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首尾空格过滤</li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>定义：对要显示的数据进行特定的格式化后再显示(适用于一些简单逻辑的处理)。<br>语法：</p><ul><li>注册过滤器：<code>Vue.filter(name, callback)</code> 或在组件的配置对象中直接写 <code>&#123; ..., filters:&#123;name(value)&#123; return... &#125;&#125;&#125;</code></li><li>使用过滤器： <code>&#123;&#123; xxx| 过滤器名 &#125;&#125;</code>  或  <code>v-bind:属性=&quot;xxx | 过滤器名&quot;</code><br>备注：</li><li>过滤器可以接受额外参数，多个过滤器可以串联。</li><li>不会改变原数据，产生新的对应的数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;mySlice&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value.slice(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局过滤器使用方式</span></span><br><span class="line">&#123;&#123;msg | mySlice&#125;&#125;  ||  :x=<span class="string">&quot;msg | mySlice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"><span class="comment">// 局部过滤器</span></span><br><span class="line">&#123;</span><br><span class="line">  data,</span><br><span class="line">  methods,</span><br><span class="line">  <span class="attr">filters</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">timeFormater</span>(<span class="params">value, str=<span class="string">&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;</span></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> dayjs(valaue).format(str)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个参数 和 过滤器连用：</span></span><br><span class="line">&#123;&#123;time | timeFormater(<span class="string">&#x27;YYYY_MM_DD&#x27;</span>) | mySlice&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul><li>作用：向其所在的节点中渲染文本内容。</li><li>与插值语法的区别： v-text会替换掉节点中的内容，  则不会</li></ul><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li>作用： 向指定节点中渲染包含html结构的内容。</li><li>与插值语法的区别：<ul><li>v-html会替换掉节点中的内容，  不会</li><li>v-html可以识别html结构。</li></ul></li><li>需注意：v-html有安全性问题<ul><li>在网站上动态渲染HTML非常危险，容易导致XSS攻击</li><li>一定要在可信的内容上使用v-html， 不要用在用户提交的内容上</li></ul></li></ul><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性</li><li>使用css配合v-cloak可以解决网速慢时页面展示出的问题</li></ul><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ul><li>v-once所在节点在初次动态渲染后，就视为静态内容了。</li><li>以后数据的改变不会引起v-once所在的结构更新，可以用于优化性能</li></ul><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>跳过其所在节点的编译过程。</li><li>可以利用他跳过 没有使用指令语法、没有使用插值语法的节点， 会加快编译。</li></ul><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h3><ol><li>局部指令：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   <span class="attr">directives</span>:&#123;</span><br><span class="line">   <span class="comment">//  &#x27;指令名&#x27;：&#x27;配置对象&#x27;</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * element : 使用当前指令的真实DOM</span></span><br><span class="line"><span class="comment">    * binding : 自定义指令的信息对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//  abc函数的的执行： 1. 指令与元素成功绑定时。 2. 指令所在的模板被重新解析时</span></span><br><span class="line">   <span class="comment">// 简写</span></span><br><span class="line">   <span class="function"><span class="title">abc</span>(<span class="params">element, binding</span>)</span>&#123;&#125;  ||  <span class="string">&#x27;a-bc&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params">element, binding</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 完整写法</span></span><br><span class="line">     <span class="attr">abc</span>:&#123;</span><br><span class="line">       <span class="comment">// 指令与元素成功绑定时</span></span><br><span class="line">       <span class="function"><span class="title">bind</span>(<span class="params">element, binding</span>)</span>&#123;&#125;,</span><br><span class="line">       <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">       <span class="function"><span class="title">inserted</span>(<span class="params">element, binding</span>)</span>&#123;&#125;,</span><br><span class="line">       <span class="comment">// 指令所在模板被重新解析时</span></span><br><span class="line">       <span class="function"><span class="title">update</span>(<span class="params">element, binding</span>)</span>&#123;&#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>全局指令<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;abc&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 指令与元素成功绑定时</span></span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">element, binding</span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 指令所在元素被插入页面时</span></span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">element, binding</span>)</span>&#123;&#125;,</span><br><span class="line">  <span class="comment">// 指令所在模板被重新解析时</span></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">element, binding</span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ol><li><code>beforeCreate</code><br> 在实例初始化之后，在数据观测和事件配置之前被调用，这时的this还不能使用</li><li><code>created</code><br> 实例创建完成后调用，可以使用<code>data</code>内的数据和<code>methods</code>内的方法了，但dom节点还未挂载，不能对dom节点进行操作</li><li><code>beforeMount</code><br> 在挂载开始之前被调用，相关的 render 函数首次被调用。</li><li><code>mounted</code><br> 挂载完毕，这时dom节点被渲染到文档内，一些需要dom的操作在此时才能正常进行</li><li><code>beforeUpdate</code><br> 数据更新前调用，发生在虚拟dom重新渲染之前，可以在这个钩子中继续更改状态，不会再次触发渲染过程</li><li><code>updated</code><br> 虚拟dom渲染成真实dom之后调用，现在可以执行 依赖于本次更新数据的操作</li><li><code>beforeDestroy</code><br> 实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><code>destroyed</code><br> 实例销毁后调用。Vue 实例指示的所有东西都会解绑定，自定义事件会失效，但原生dom事件依然有效。</li></ol><h3 id="常用的钩子"><a href="#常用的钩子" class="headerlink" title="常用的钩子"></a>常用的钩子</h3><ol><li>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</li><li>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</li></ol><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="Vue中使用组件的三个步骤"><a href="#Vue中使用组件的三个步骤" class="headerlink" title="Vue中使用组件的三个步骤"></a>Vue中使用组件的三个步骤</h3><ol><li>定义组件(创建组件)<br> 使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样<br> 区别如下：<ol><li>不能写el： 最终所有组件都要经过一个vm的管理，由vm中的el决定服务于哪个容器</li><li>data必须写成函数： 避免组件被复用时，数据存在引用关系</li><li>组件结构的配置项为<code>template</code></li></ol></li><li>注册组件<br> 局部注册：new Vue的时候传入components选项<pre><code> 全局注册：Vue.component(&#39;组件名&#39;,组件)</code></pre></li><li>编写组件标签<br> <school></school></li></ol><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>关于组件名:<br> 一个单词组成：<pre><code> 第一种写法(首字母小写)：school 第二种写法(首字母大写)：School</code></pre> 多个单词组成：<pre><code> 第一种写法(kebab-case命名)：my-school 第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</code></pre> 备注：<pre><code> 组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。 可以使用name配置项指定组件在开发者工具中呈现的名字。</code></pre></li><li>关于组件标签:<br>   第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code><br>   第二种写法：<code>&lt;school/&gt;</code><br>   备注：不用使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染。</li></ol><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><ol><li>组件的本质是一个名为<code>VueComponent</code>的构造函数，这个构造函数是由<code>Vue.extend</code> 生成</li><li>只需要写入 <code>&lt;school/&gt;</code> 或 <code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会自动帮我们执行<code>new VueComponent(options)</code></li><li>每次调用Vue.extend， 返回的都是一个全新的VueComponent!</li><li>关于this指向：<ul><li>组件配置中：<br>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</li><li>new Vue(options)配置中：<br>data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。<br>— 注意 —<br>内置关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code><br>为了让组件实例对象可以访问到Vue原型上的属性和方法</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
    <category term="Vue笔记" scheme="https://uihh.cn/tags/Vue%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js-cookie</title>
    <link href="https://uihh.cn/2021/07/07/js-cookie/"/>
    <id>https://uihh.cn/2021/07/07/js-cookie/</id>
    <published>2021-07-07T07:52:04.000Z</published>
    <updated>2022-01-11T03:45:36.073Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h3 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个cookie，在这整个站点中有效</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建一个有效期为7天的cookie，在整个站点中有效</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br><span class="line"><span class="comment">// 创建一个有效期为7天的cookie，只在当前页面生效</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>  &#125;)</span><br></pre></td></tr></table></figure><h3 id="读取cookie"><a href="#读取cookie" class="headerlink" title="读取cookie"></a>读取cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get(<span class="string">&quot;name&quot;</span>) <span class="comment">// =&gt; &#x27;value&#x27;</span></span><br><span class="line">Cookies.get(<span class="string">&quot;nothing&quot;</span>) <span class="comment">//=&gt; &#x27;undefined&#x27;</span></span><br><span class="line"><span class="comment">// 读取所有可见的cookies</span></span><br><span class="line">Cookies.get() <span class="comment">// =&gt; &#123; name: &#x27;value&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cookies.remove(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果设置了路径，在删除时也需指定路径</span></span><br><span class="line"><span class="comment">// 例：</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 删除不存在的cookies不会报错也没有返回</span></span><br><span class="line">Cookies.remove(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">// 删除失败</span></span><br><span class="line">Cookies.remove(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span> &#125;) <span class="comment">// 删除成功</span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>如果担心修改掉Cookies中的数据，可以使用<code>noConflict</code>方法定义一个新的空间，并保留原始cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 js-cookie api 分配给不同的变量。恢复原来的&#x27;window.Cookies&#x27;</span></span><br><span class="line"><span class="keyword">var</span> Cookies2 = Cookies.noConflict()</span><br><span class="line">Cookies2.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;value&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="json相关"><a href="#json相关" class="headerlink" title="json相关"></a>json相关</h3><p>js-cookies允许向cookie中存储json信息<br>通过set方法传入Array或对象，而不是简单的string，那么js-cookies会自动调用JSON.stringify将传入的数据转为json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line">Cookies.get(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &#x27;&#123; &quot;foo&quot;: &quot;bar&quot; &#125;&#x27;</span></span><br><span class="line">Cookies.get(); <span class="comment">// =&gt; &#123; name: &#x27;&#123; &quot;foo&quot;: &quot;bar&quot; &#125;&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>如果用getJSON方法获取Cookies，那么js-cookies会调用JSON.parse 解析 json 后返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cookies.getJSON(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &#123; foo:&#x27;bar&#x27; &#125;</span></span><br><span class="line">Cookies.getJSON();  <span class="comment">// =&gt; &#123; name:&#123; foo: &#x27;bar&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="set方法支持的属性"><a href="#set方法支持的属性" class="headerlink" title="set方法支持的属性"></a>set方法支持的属性</h3><ol><li>expires<br>定义有效期。如果传入Number,那么单位为天，也可以传入一个Date对象，表示有效期至Date指定时间。如果省略，cookie将成为会话cookie。默认 当用户关闭浏览器时Cookie被删除。</li><li>path<br><code>string</code>, 表示cookie对哪个地址可见，默认为 <code>/</code></li><li>domain<br><code>string</code>, 表示此cookie对哪个域名可见。改cookie也将对所有子域可见。 默认Cookie仅对创建该cookie的页面的域或其子域可见。</li><li>secure<br><code>true | false</code>, 表示cookie传输是否仅支持https，默认 无安全协议要求</li></ol>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="浏览器存储" scheme="https://uihh.cn/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>执行期上下文</title>
    <link href="https://uihh.cn/2021/07/05/%E6%89%A7%E8%A1%8C%E6%9C%9F%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://uihh.cn/2021/07/05/%E6%89%A7%E8%A1%8C%E6%9C%9F%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2021-07-05T03:15:53.000Z</published>
    <updated>2022-01-11T03:45:36.076Z</updated>
    
    <content type="html"><![CDATA[<p><a class="link"   href="https://www.cnblogs.com/echolun/p/11438363.html" >执行期上下文详解(点击跳转)<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/echolun/p/11438363.html&quot; &gt;执行期上下文详解(点击跳转)&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>call()、apply()、bind()</title>
    <link href="https://uihh.cn/2021/06/24/call/"/>
    <id>https://uihh.cn/2021/06/24/call/</id>
    <published>2021-06-24T08:06:13.000Z</published>
    <updated>2022-01-11T03:45:36.072Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><h3 id="call-的使用方法"><a href="#call-的使用方法" class="headerlink" title="call()的使用方法"></a>call()的使用方法</h3><blockquote><p>语法：function.call(thisObj, arg1, arg2, …)</p></blockquote><blockquote><p>说明：<code>call()</code> 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果提供的thisObj参数为<code>null</code>或<code>undefined</code>时会自动替换为指向全局对象，原始值会被包装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;class1&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;class2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> Class1();</span><br><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> Class2();</span><br><span class="line"></span><br><span class="line">c1.showNam.call(c2); <span class="comment">//class2</span></span><br></pre></td></tr></table></figure><p><code>call()</code>的意思是把c1的方法放到c2上执行，原来c2是没有showName()方法的,现在把c1的showName方法放进c2里执行，所以this.name应该是class2，执行的结果就是’class2’；<br><code>call()</code>方法实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.showTxt = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(txt)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Class1.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> Class2()</span><br><span class="line">c2.showTxt(<span class="string">&#x27;cc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样Class2就继承Class1了，Class1.call(this)的意思就是使用Class1对象代替this对象，那么Class2中就可以有了Class1的所有属性和方法了，c2对象就能够直接调用Class1的方法及属性，执行结果就是console.log(‘cc’);<br>使用<code>call()</code>继承的弊端： 如果Class1后续向<code>prototype</code>添加了新的属性或方法，Class2拿不到新增的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class1.prototype.name = <span class="string">&#x27;class1&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(c2.name) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="call-原理"><a href="#call-原理" class="headerlink" title="call()原理"></a>call()原理</h3><p>js实现call</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">        <span class="attr">a</span>: a, <span class="attr">b</span>: b, <span class="attr">c</span>: c, <span class="attr">d</span>: d</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> yx = &#123; <span class="attr">name</span>: <span class="string">&#x27;yx&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Function</span>.prototype.newCall = <span class="function"><span class="keyword">function</span> (<span class="params">obj, ...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = obj || <span class="built_in">window</span>;</span><br><span class="line">      obj.p = <span class="built_in">this</span>;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * var result = obj.p(...args);</span></span><br><span class="line"><span class="comment">       * */</span> </span><br><span class="line">      <span class="keyword">var</span> newArgs = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        newArgs.push(<span class="string">&#x27;args[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;obj.p(&#x27;</span> + newArgs + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">      <span class="keyword">delete</span> obj.p;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bib = person.newCall(yx, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(bib);</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><h3 id="apply-的使用方法"><a href="#apply-的使用方法" class="headerlink" title="apply()的使用方法"></a>apply()的使用方法</h3><blockquote><p>语法： function.apply(thisArg, [argArr])</p></blockquote><blockquote><p>说明： <code>apply()</code>方法与<code>call()</code>方法类似。也是改变this指向(函数执行时所在的作用域)，然后在指定的作用域中，调用该函数，同时也会立即执行该函数。唯一的区别在于，apply()接受一个数组作为执行时的参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;yx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">firstName,lastName</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27; &#x27;</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line">test.apply(obj,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]) <span class="comment">// a yx b</span></span><br></pre></td></tr></table></figure><h3 id="apply-原理"><a href="#apply-原理" class="headerlink" title="apply()原理"></a>apply()原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">    <span class="attr">a</span>:a,<span class="attr">b</span>:b,<span class="attr">c</span>:c,<span class="attr">d</span>:d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> yx = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.newApply = <span class="function"><span class="keyword">function</span>(<span class="params">obj, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = obj || <span class="built_in">window</span>, result;</span><br><span class="line">  obj.p = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span>(!arr)&#123;</span><br><span class="line">    result = obj.p()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//  result = obj.p(...arr)</span></span><br><span class="line">    <span class="keyword">var</span> newArgs = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">      newArgs.push(<span class="string">&#x27;arr[&#x27;</span>+ i +<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">&#x27;obj.p(&#x27;</span>+ newArgs +<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> obj.p</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = person.newApply(yx,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]);</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><h3 id="bind-使用方法"><a href="#bind-使用方法" class="headerlink" title="bind()使用方法"></a>bind()使用方法</h3><blockquote><p>语法: function.bind(thisArg, arg1, arg2, …)</p></blockquote><blockquote><p>说明:  <code>bind()</code>方法主要就是将函数绑定到某个对象，<code>bind()</code>会创建一个函数，函数体内的this对象的值会被绑定到传入<code>bind()</code>中的第一个参数的值，例如：f.bind(obj)，实际上可以理解为obj.f()，这时f函数体内的this自然指向的是obj</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.num = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">num</span>:<span class="number">81</span>,</span><br><span class="line">  getNum ()&#123; <span class="keyword">return</span> <span class="built_in">this</span>.name &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getNum = moduleA.getNum</span><br><span class="line">getNum() <span class="comment">//9.  因为这个这例子中this 指向全局window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boundGetNum = getNum.bind(moduleA)</span><br><span class="line">boundGetNum(); <span class="comment">//81</span></span><br></pre></td></tr></table></figure><h3 id="bind-原理"><a href="#bind-原理" class="headerlink" title="bind()原理"></a>bind()原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newBind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">var</span> context = args.shift();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrSum = args.concat([...arguments])</span><br><span class="line">    <span class="keyword">return</span> that.apply(context, arrSum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="改变this指向" scheme="https://uihh.cn/tags/%E6%94%B9%E5%8F%98this%E6%8C%87%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Array常用方法</title>
    <link href="https://uihh.cn/2021/06/24/Array/"/>
    <id>https://uihh.cn/2021/06/24/Array/</id>
    <published>2021-06-24T04:54:08.000Z</published>
    <updated>2022-01-11T03:45:36.065Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h3 id="Arrar-构造器私有方法"><a href="#Arrar-构造器私有方法" class="headerlink" title="Arrar 构造器私有方法"></a>Arrar 构造器私有方法</h3><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><p><code>Array.of()</code>用于将参数依次转化为数组中的一项，然后返回新数组。而不管这个参数是数字还是其他</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">8.0</span>); <span class="comment">//[8]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">8.0</span>); <span class="comment">//[empty * 8]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">8.0</span>, <span class="number">5</span>); <span class="comment">// [8,5]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">8.0</span>,<span class="number">5</span>);  <span class="comment">// [8,5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="string">&#x27;8&#x27;</span>); <span class="comment">// [&quot;8&quot;]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="string">&#x27;8&#x27;</span>); <span class="comment">// [&quot;8&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。然后返回一个新数组，原数组不变。</p><blockquote><p>语法 : Array.from(arrayLike, callbackFn, thisArg)<br>参数:</p></blockquote><ul><li>arrayLike : 必选,想要转换成数组的类数组对象或可迭代的对象</li><li>callbankFn : 可选,回调函数，新生成的数组会经过该函数的加工再返回</li><li>thisArg : 可选,回调函数执行时this指向的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg = &#123;<span class="number">0</span>:<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>, <span class="attr">length</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Array</span>.from(arg, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  value: 每项的键值</span></span><br><span class="line">  <span class="keyword">return</span> value;  <span class="comment">// 必须指定返回值，否则返回的新数组元素都为undefined</span></span><br><span class="line">&#125;,arg)</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>]));  <span class="comment">//[&quot;abc &quot;,&quot;def&quot;]</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">&#x27;ab&#x27;</span>],[<span class="number">2</span>,<span class="string">&#x27;cd&#x27;</span>]])) <span class="comment">// [[1,&#x27;ab&#x27;],[2,&#x27;cd&#x27;]]</span></span><br></pre></td></tr></table></figure><h3 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><code>concat()</code> 方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;hello&#x27;</span>].concat([<span class="string">&#x27;world&#x27;</span>])</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;world&quot;]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>].concat([<span class="string">&#x27;world&#x27;</span>], [<span class="string">&#x27;!&#x27;</span>])</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;]</span></span><br><span class="line"></span><br><span class="line">[].concat(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment">// [&#123; a: 1 &#125;, &#123; b: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>].concat(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// [2, &#123;a: 1&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><code>join()</code>方法将一个数组(或一个类数组对象)的所有元素连接成一个字符串，并返回这个字符串。如果数组只有一个项目，那么将直接返回该项目而不使用分隔符；<br>如果没有传参，分隔符默认为逗号。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Fire&#x27;</span>,<span class="string">&#x27;Air&#x27;</span>,<span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line">arr.join() <span class="comment">// &quot;Fire,Air,Water&quot;</span></span><br><span class="line">arr.join(<span class="string">&#x27;&#x27;</span>) <span class="comment">// &quot;FireAirWater&quot;</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><code>slice()</code>方法返回一个新数组，这一对象是一个由<code>begin</code>和<code>end</code>决定的原数组的浅拷贝(包括<code>begin</code>,不包括<code>end</code>).原数组不会被改变<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.slice(<span class="number">2</span>) <span class="comment">//  [3,4,5]</span></span><br><span class="line">arr.slice(<span class="number">2</span>,<span class="number">4</span>) <span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><code>toString()</code>返回一个字符串，表示指定的数组及元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>].toString()</span><br><span class="line"><span class="comment">//  &quot;1,2,a,b&quot;</span></span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><code>indexOf()</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。<br>第一个参数为要查找的元素（必选）， 第二个参数是开始查询的位置（可选）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">arr.indexOf(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// 2</span></span><br><span class="line">arr.indexOf(<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h3><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p><code>pop()</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h5 id="pop-原理"><a href="#pop-原理" class="headerlink" title="pop()原理"></a>pop()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  len--;</span><br><span class="line">  <span class="keyword">let</span> value = arr[len];</span><br><span class="line">  <span class="keyword">delete</span> arr[len]</span><br><span class="line">  arr.length = len;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p><code>push()</code> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">1</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1,2,3,4,5,1]</span></span><br></pre></td></tr></table></figure><h5 id="push-原理"><a href="#push-原理" class="headerlink" title="push()原理"></a>push()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._push = <span class="function"><span class="keyword">function</span>(<span class="params">...items</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length,</span><br><span class="line">    argLen = items.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;argLen;i++)&#123;</span><br><span class="line">    arr[len+i] = items[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> newLength = len+argLen;</span><br><span class="line">  arr.length = newLength;</span><br><span class="line">  <span class="keyword">return</span> newLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p><code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse()) <span class="comment">// [5,4,3,2,1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p><code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">// [1] 返回被删除的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;add1&#x27;</span>)) <span class="comment">//[] 空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [&#x27;add1&#x27;,1，2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;add2&#x27;</span>)) <span class="comment">//[1] 返回被替换的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [&#x27;add2&#x27;，2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p><code>shift()</code> 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift()) <span class="comment">// 返回删除元素的值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p><code>unshift()</code> 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// 6  返回该数组的新长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [0,1,2,1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p><code>sort()</code> 方法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的，该方法改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()) <span class="comment">// [100, 16, 50, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a-b &#125;)) <span class="comment">// [5, 8, 16, 50, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> b-a &#125;)) <span class="comment">// [100,50,16,8,5]</span></span><br></pre></td></tr></table></figure><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p><font color=red>遍历类型的方法最后返回的都是一个新数组。并不会改变原有数组的值</font></p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p><code>forEach()</code>方法用于调用数组的每一个元素，并将元素传递给回调函数。</p><blockquote><p>语法: array.forEach( callback(currentValue, index, array),thisArg)</p></blockquote><ul><li>callback: 为数组中每个元素执行的函数，该函数接收一至三个参数<ul><li>currentValue : 必填,当前元素</li><li>index : 可选,当前元素的索引值</li><li>arr : 可选,当前元素所属的数组对象</li><li>thisArg : 可选,传递给函数的this值,如果参数为空,当前回调函数this指向window<br>注意:<br>1、<code>forEach()</code>对于空数组不会执行回调函数.<br>2、for循环可以用continue跳过循环中的一个迭代，<code>forEach()</code>用continue会报错<br>3、<code>forEach()</code>需要用return 跳过循环中的一个迭代，跳过之后会执行下一个迭代<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i] == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]) <span class="comment">// 1  3</span></span><br><span class="line">&#125;</span><br><span class="line">arr.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(value == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(value)<span class="comment">// 1  3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="forEach原理"><a href="#forEach原理" class="headerlink" title="forEach原理"></a>forEach原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn,thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!thisArg)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="built_in">this</span>.length; i++)&#123;</span><br><span class="line">      fn(<span class="built_in">this</span>[i],i,<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;thisArg.length; i++)&#123;</span><br><span class="line">      fn.call(thisArg,thisArg[i],i,thisArg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试，返回一个布尔值。</p><blockquote><p>语法 : arr.every(callback(value, index, array), thisArg)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].every( <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">Number</span>.isInteger(value) );  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以将<code>every()</code>方法看做一个等价于逻辑与的数组</p><h5 id="every-实现原理"><a href="#every-实现原理" class="headerlink" title="every 实现原理"></a>every 实现原理</h5><p>为每个值执行回调，如果在任何时候返回false，则退出循环，整个方法返回false。如果循环终止都没有进入到<code>if</code>语句，说明每个条件都成立，则方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._every = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[i];</span><br><span class="line">    <span class="keyword">if</span>(!callback(value, i, arr))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p><code>some()</code>方法<code>every()</code>刚好相反，即只要其中一个为<code>true</code>就会返回<code>true</code>。与<code>every</code>方法类似，可以将<code>some</code>方法看做一个等价的逻辑或数组</p><h5 id="some-实现原理"><a href="#some-实现原理" class="headerlink" title="some 实现原理"></a>some 实现原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._some = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; I&lt;len; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[i];</span><br><span class="line">    <span class="keyword">if</span>(callback(value,i,arr))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p><code>filter()</code> 方法创建一个新数组, filter会把传入的函数依次作用于每个元素，然后根据返回值是 true 还是false决定保留还是丢弃该元素。用于把Array的某些元素过滤掉，然后将剩下的元素放入新数组中返回。</p><blockquote><p>语法: var newArr = arr.filter(callback(element, index, array),thisArg)<br>参数: </p></blockquote><ul><li>callback : 用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留<ul><li>element : 数组中正在处理的元素</li><li>index : 正在处理的元素在数组中的索引</li><li>array : 当前调用filter的数组本身</li></ul></li><li>thisArg : 改变回调函数中this的指向<h5 id="filter-的原理"><a href="#filter-的原理" class="headerlink" title="filter()的原理"></a>filter()的原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._filter = <span class="function"><span class="keyword">function</span>(<span class="params">callbackFn,thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(callbackFn) !== <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callbackFn + <span class="string">&#x27;is not a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">this</span>, </span><br><span class="line">    len = arr.length,</span><br><span class="line">    newArr=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(callbackFn(arr[i],i,arr))&#123;</span><br><span class="line">      newArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><blockquote><p><code>map()</code> 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p></blockquote><blockquote><p>语法: var newArr = array.map( function(currentValue, index, arr),thisArg)<br>参数同forEach()</p></blockquote><h5 id="map-原理"><a href="#map-原理" class="headerlink" title="map()原理"></a>map()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._map = <span class="function"><span class="keyword">function</span>(<span class="params">callbackFn, thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> === <span class="literal">null</span> || <span class="built_in">this</span> === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot read property &#x27;_map&#x27; of null&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(callbackFn)!= <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callbackFn+<span class="string">&#x27;is not a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length,</span><br><span class="line">    newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        <span class="keyword">let</span> kValue = arr[i];</span><br><span class="line">        <span class="keyword">let</span> mappedValue = callbackFn.call(thisArg,kValue,i,arr)</span><br><span class="line">        newArr[i] = mappedValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a._map(<span class="function"><span class="keyword">function</span> (<span class="params">item, i, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p><blockquote><p>语法 : var result = arr.reduce(callback(acc, cur, index, array), initValue)<br>参数: </p></blockquote><ul><li>callback : 执行数组中每个值得函数,包含四个参数<ul><li>acc : 必选,initvalue提供的初始值,或者是 上一次电用的返回值(可以理解为收集箱,收集每次调用后的返回值)</li><li>cur : 必选,数组中当前被处理的元素</li><li>index : 可选,当前元素的索引</li><li>array : 可选,调用<code>reduce()</code>的数组</li></ul></li><li>initValue : 可选,作为第一次调用时 callback的第一个参数</li></ul><h5 id="reduce-原理"><a href="#reduce-原理" class="headerlink" title="reduce()原理"></a>reduce()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callbackFn, initValue</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 异常处理，和map类似</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> === <span class="literal">null</span> || <span class="built_in">this</span> === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot read property &#x27;_reduce&#x27; of null&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理回调类型异常</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(callbackFn)!= <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callbackFn+<span class="string">&#x27;is not a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    <span class="comment">// 判断是否传入初始值，如果没有，初始值为当前数组的第一位,否则以传入的值当做初始值</span></span><br><span class="line">    acc = <span class="built_in">arguments</span>.length === <span class="number">1</span> ? arr[<span class="number">0</span>] : initValue,</span><br><span class="line">    <span class="comment">// 若没有传入初始值，数组第一位为初始值，所以遍历要从第二位开始，也就是下标为1的位置</span></span><br><span class="line">    startIdx = <span class="built_in">arguments</span>.length === <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = startIdx; i&lt;arr.length; i++)&#123;</span><br><span class="line">    acc = callbackFn(acc,arr[i],i,arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="Array" scheme="https://uihh.cn/categories/javascript/Array/"/>
    
    
    <category term="数组常用方法" scheme="https://uihh.cn/tags/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>接口的错误拦截</title>
    <link href="https://uihh.cn/2021/06/23/%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%94%99%E8%AF%AF%E6%8B%A6%E6%88%AA/"/>
    <id>https://uihh.cn/2021/06/23/%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%94%99%E8%AF%AF%E6%8B%A6%E6%88%AA/</id>
    <published>2021-06-23T07:17:25.000Z</published>
    <updated>2022-01-11T03:45:36.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对axios进行基础配置"><a href="#对axios进行基础配置" class="headerlink" title="对axios进行基础配置"></a>对axios进行基础配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  main.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL = <span class="string">&#x27;/api&#x27;</span>,  <span class="comment">// 根据前端的跨域方式做调整</span></span><br><span class="line">  timeout = <span class="number">8000</span>   <span class="comment">// 设置超时时间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="request拦截器（请求发送后端之前）"><a href="#request拦截器（请求发送后端之前）" class="headerlink" title="request拦截器（请求发送后端之前）"></a>request拦截器（请求发送后端之前）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">instance.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config);  <span class="comment">// config将发送到后端</span></span><br><span class="line">    config.headers.token = <span class="string">&#x27;此处可设置token的内容&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;  <span class="comment">//当发生错误时，执行该部分代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);  <span class="comment">//打印错误信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="response拦截器（数据返回后）"><a href="#response拦截器（数据返回后）" class="headerlink" title="response拦截器（数据返回后）"></a>response拦截器（数据返回后）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">instance.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;状态码正确&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;弹出此异常&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error),</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;对axios进行基础配置&quot;&gt;&lt;a href=&quot;#对axios进行基础配置&quot; class=&quot;headerlink&quot; title=&quot;对axios进行基础配置&quot;&gt;&lt;/a&gt;对axios进行基础配置&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;axios&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; instance = axios.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseURL = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 根据前端的跨域方式做调整&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeout = &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 设置超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="axios" scheme="https://uihh.cn/categories/axios/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中watch用法详解</title>
    <link href="https://uihh.cn/2021/06/22/watch/"/>
    <id>https://uihh.cn/2021/06/22/watch/</id>
    <published>2021-06-22T11:01:52.000Z</published>
    <updated>2022-01-11T03:45:36.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>  当data中变量的值变化时，watch监听到并且执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">value</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">value</span>(<span class="params">newVal, oldVal</span>)</span>&#123;</span><br><span class="line">      <span class="comment">/* 要执行操作 */</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="handler方法和immediate属性"><a href="#handler方法和immediate属性" class="headerlink" title="handler方法和immediate属性"></a>handler方法和immediate属性</h2><p>  上面的例子只有value的值变化时，watch才会执行。如果想从开始的时候就对value进行监听，就需要用到 <code>handler</code> 和 <code>immediate</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="attr">value</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVla</span>)</span> &#123;</span><br><span class="line">      <span class="comment">/* 要执行操作 */</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当immediate 值为true时, 会立即执行handler方法</span></span><br><span class="line">    <span class="comment">// 如果值为false，效果同上面例子</span></span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deep属性（深度监听）"><a href="#deep属性（深度监听）" class="headerlink" title="deep属性（深度监听）"></a>deep属性（深度监听）</h2><blockquote><p>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变。需要添加deep属性对 对象进行深度监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">obj</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">c</span>:&#123;</span><br><span class="line">          <span class="attr">d</span>:<span class="number">3</span></span><br><span class="line">          <span class="attr">f</span>:<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="attr">obj</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class="line">      <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时会给整个对象的属性都加上监听，当对象属性较多时，每个值变化都会触发handler函数。<br>如果只需要监听一个属性，可以使用字符串形式监听对象内的单个属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="string">&#x27;c.d&#x27;</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newVla, oldVal</span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组（一维、多维）的变化不需要通过深度监听，对象数组中对象的属性变化需要deep的深度监听</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;  当data中变量的值变化时，watch监听到并且执行&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;watch&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newVal, oldVal&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/* 要执行操作 */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://uihh.cn/tags/Vue/"/>
    
  </entry>
  
</feed>
