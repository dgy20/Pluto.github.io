<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yyxxx</title>
  
  
  <link href="https://uihh.cn/atom.xml" rel="self"/>
  
  <link href="https://uihh.cn/"/>
  <updated>2021-07-07T09:11:47.665Z</updated>
  <id>https://uihh.cn/</id>
  
  <author>
    <name>yyxxx229</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js-cookie</title>
    <link href="https://uihh.cn/2021/07/07/js-cookie/"/>
    <id>https://uihh.cn/2021/07/07/js-cookie/</id>
    <published>2021-07-07T07:52:04.000Z</published>
    <updated>2021-07-07T09:11:47.665Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h3 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个cookie，在这整个站点中有效</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建一个有效期为7天的cookie，在整个站点中有效</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br><span class="line"><span class="comment">// 创建一个有效期为7天的cookie，只在当前页面生效</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>  &#125;)</span><br></pre></td></tr></table></figure><h3 id="读取cookie"><a href="#读取cookie" class="headerlink" title="读取cookie"></a>读取cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cookies.get(<span class="string">&quot;name&quot;</span>) <span class="comment">// =&gt; &#x27;value&#x27;</span></span><br><span class="line">Cookies.get(<span class="string">&quot;nothing&quot;</span>) <span class="comment">//=&gt; &#x27;undefined&#x27;</span></span><br><span class="line"><span class="comment">// 读取所有可见的cookies</span></span><br><span class="line">Cookies.get() <span class="comment">// =&gt; &#123; name: &#x27;value&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cookies.remove(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果设置了路径，在删除时也需指定路径</span></span><br><span class="line"><span class="comment">// 例：</span></span><br><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 删除不存在的cookies不会报错也没有返回</span></span><br><span class="line">Cookies.remove(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">// 删除失败</span></span><br><span class="line">Cookies.remove(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>:<span class="string">&#x27;&#x27;</span> &#125;) <span class="comment">// 删除成功</span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>如果担心修改掉Cookies中的数据，可以使用<code>noConflict</code>方法定义一个新的空间，并保留原始cookies</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 js-cookie api 分配给不同的变量。恢复原来的&#x27;window.Cookies&#x27;</span></span><br><span class="line"><span class="keyword">var</span> Cookies2 = Cookies.noConflict()</span><br><span class="line">Cookies2.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;value&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="json相关"><a href="#json相关" class="headerlink" title="json相关"></a>json相关</h3><p>js-cookies允许向cookie中存储json信息<br>通过set方法传入Array或对象，而不是简单的string，那么js-cookies会自动调用JSON.stringify将传入的数据转为json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line">Cookies.get(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &#x27;&#123; &quot;foo&quot;: &quot;bar&quot; &#125;&#x27;</span></span><br><span class="line">Cookies.get(); <span class="comment">// =&gt; &#123; name: &#x27;&#123; &quot;foo&quot;: &quot;bar&quot; &#125;&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>如果用getJSON方法获取Cookies，那么js-cookies会调用JSON.parse 解析 json 后返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cookies.getJSON(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &#123; foo:&#x27;bar&#x27; &#125;</span></span><br><span class="line">Cookies.getJSON();  <span class="comment">// =&gt; &#123; name:&#123; foo: &#x27;bar&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="set方法支持的属性"><a href="#set方法支持的属性" class="headerlink" title="set方法支持的属性"></a>set方法支持的属性</h3><ol><li>expires<br>定义有效期。如果传入Number,那么单位为天，也可以传入一个Date对象，表示有效期至Date指定时间。如果省略，cookie将成为会话cookie。默认 当用户关闭浏览器时Cookie被删除。</li><li>path<br><code>string</code>, 表示cookie对哪个地址可见，默认为 <code>/</code></li><li>domain<br><code>string</code>, 表示此cookie对哪个域名可见。改cookie也将对所有子域可见。 默认Cookie仅对创建该cookie的页面的域或其子域可见。</li><li>secure<br><code>true | false</code>, 表示cookie传输是否仅支持https，默认 无安全协议要求</li></ol>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="浏览器存储" scheme="https://uihh.cn/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>执行期上下文</title>
    <link href="https://uihh.cn/2021/07/05/%E6%89%A7%E8%A1%8C%E6%9C%9F%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <id>https://uihh.cn/2021/07/05/%E6%89%A7%E8%A1%8C%E6%9C%9F%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
    <published>2021-07-05T03:15:53.000Z</published>
    <updated>2021-07-05T03:17:43.448Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/echolun/p/11438363.html">执行期上下文详解(点击跳转)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/echolun/p/11438363.html&quot;&gt;执行期上下文详解(点击跳转)&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>call()、apply()、bind()</title>
    <link href="https://uihh.cn/2021/06/24/call/"/>
    <id>https://uihh.cn/2021/06/24/call/</id>
    <published>2021-06-24T08:06:13.000Z</published>
    <updated>2021-07-07T07:52:49.702Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h2 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h2><h3 id="call-的使用方法"><a href="#call-的使用方法" class="headerlink" title="call()的使用方法"></a>call()的使用方法</h3><blockquote><p>语法：function.call(thisObj, arg1, arg2, …)</p></blockquote><blockquote><p>说明：<code>call()</code> 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。如果提供的thisObj参数为<code>null</code>或<code>undefined</code>时会自动替换为指向全局对象，原始值会被包装</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;class1&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;class2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> Class1();</span><br><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> Class2();</span><br><span class="line"></span><br><span class="line">c1.showNam.call(c2); <span class="comment">//class2</span></span><br></pre></td></tr></table></figure><p><code>call()</code>的意思是把c1的方法放到c2上执行，原来c2是没有showName()方法的,现在把c1的showName方法放进c2里执行，所以this.name应该是class2，执行的结果就是’class2’；<br><code>call()</code>方法实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.showTxt = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(txt)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Class1.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c2 = <span class="keyword">new</span> Class2()</span><br><span class="line">c2.showTxt(<span class="string">&#x27;cc&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这样Class2就继承Class1了，Class1.call(this)的意思就是使用Class1对象代替this对象，那么Class2中就可以有了Class1的所有属性和方法了，c2对象就能够直接调用Class1的方法及属性，执行结果就是console.log(‘cc’);<br>使用<code>call()</code>继承的弊端： 如果Class1后续向<code>prototype</code>添加了新的属性或方法，Class2拿不到新增的属性和方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class1.prototype.name = <span class="string">&#x27;class1&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(c2.name) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="call-原理"><a href="#call-原理" class="headerlink" title="call()原理"></a>call()原理</h3><p>js实现call</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">        <span class="attr">a</span>: a, <span class="attr">b</span>: b, <span class="attr">c</span>: c, <span class="attr">d</span>: d</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> yx = &#123; <span class="attr">name</span>: <span class="string">&#x27;yx&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Function</span>.prototype.newCall = <span class="function"><span class="keyword">function</span> (<span class="params">obj, ...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> obj = obj || <span class="built_in">window</span>;</span><br><span class="line">      obj.p = <span class="built_in">this</span>;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * var result = obj.p(...args);</span></span><br><span class="line"><span class="comment">       * */</span> </span><br><span class="line">      <span class="keyword">var</span> newArgs = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">        newArgs.push(<span class="string">&#x27;args[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;obj.p(&#x27;</span> + newArgs + <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">      <span class="keyword">delete</span> obj.p;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> bib = person.newCall(yx, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(bib);</span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h2><h3 id="apply-的使用方法"><a href="#apply-的使用方法" class="headerlink" title="apply()的使用方法"></a>apply()的使用方法</h3><blockquote><p>语法： function.apply(thisArg, [argArr])</p></blockquote><blockquote><p>说明： <code>apply()</code>方法与<code>call()</code>方法类似。也是改变this指向(函数执行时所在的作用域)，然后在指定的作用域中，调用该函数，同时也会立即执行该函数。唯一的区别在于，apply()接受一个数组作为执行时的参数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;yx&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">firstName,lastName</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27; &#x27;</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line">test.apply(obj,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]) <span class="comment">// a yx b</span></span><br></pre></td></tr></table></figure><h3 id="apply-原理"><a href="#apply-原理" class="headerlink" title="apply()原理"></a>apply()原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">this</span>.name,</span><br><span class="line">    <span class="attr">a</span>:a,<span class="attr">b</span>:b,<span class="attr">c</span>:c,<span class="attr">d</span>:d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> yx = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;yx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.newApply = <span class="function"><span class="keyword">function</span>(<span class="params">obj, arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = obj || <span class="built_in">window</span>, result;</span><br><span class="line">  obj.p = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">if</span>(!arr)&#123;</span><br><span class="line">    result = obj.p()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//  result = obj.p(...arr)</span></span><br><span class="line">    <span class="keyword">var</span> newArgs = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">      newArgs.push(<span class="string">&#x27;arr[&#x27;</span>+ i +<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">&#x27;obj.p(&#x27;</span>+ newArgs +<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> obj.p</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = person.newApply(yx,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>]);</span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h2><h3 id="bind-使用方法"><a href="#bind-使用方法" class="headerlink" title="bind()使用方法"></a>bind()使用方法</h3><blockquote><p>语法: function.bind(thisArg, arg1, arg2, …)</p></blockquote><blockquote><p>说明:  <code>bind()</code>方法主要就是将函数绑定到某个对象，<code>bind()</code>会创建一个函数，函数体内的this对象的值会被绑定到传入<code>bind()</code>中的第一个参数的值，例如：f.bind(obj)，实际上可以理解为obj.f()，这时f函数体内的this自然指向的是obj</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.num = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">num</span>:<span class="number">81</span>,</span><br><span class="line">  getNum ()&#123; <span class="keyword">return</span> <span class="built_in">this</span>.name &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getNum = moduleA.getNum</span><br><span class="line">getNum() <span class="comment">//9.  因为这个这例子中this 指向全局window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boundGetNum = getNum.bind(moduleA)</span><br><span class="line">boundGetNum(); <span class="comment">//81</span></span><br></pre></td></tr></table></figure><h3 id="bind-原理"><a href="#bind-原理" class="headerlink" title="bind()原理"></a>bind()原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newBind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">var</span> context = args.shift();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrSum = args.concat([...arguments])</span><br><span class="line">    <span class="keyword">return</span> that.apply(context, arrSum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="改变this指向" scheme="https://uihh.cn/tags/%E6%94%B9%E5%8F%98this%E6%8C%87%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Array常用方法</title>
    <link href="https://uihh.cn/2021/06/24/Array/"/>
    <id>https://uihh.cn/2021/06/24/Array/</id>
    <published>2021-06-24T04:54:08.000Z</published>
    <updated>2021-07-20T12:51:55.274Z</updated>
    
    <content type="html"><![CDATA[<hr><span id="more"></span><h3 id="Arrar-构造器私有方法"><a href="#Arrar-构造器私有方法" class="headerlink" title="Arrar 构造器私有方法"></a>Arrar 构造器私有方法</h3><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><p><code>Array.of()</code>用于将参数依次转化为数组中的一项，然后返回新数组。而不管这个参数是数字还是其他</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">8.0</span>); <span class="comment">//[8]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">8.0</span>); <span class="comment">//[empty * 8]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">8.0</span>, <span class="number">5</span>); <span class="comment">// [8,5]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">8.0</span>,<span class="number">5</span>);  <span class="comment">// [8,5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="string">&#x27;8&#x27;</span>); <span class="comment">// [&quot;8&quot;]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="string">&#x27;8&#x27;</span>); <span class="comment">// [&quot;8&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="from"><a href="#from" class="headerlink" title="from"></a>from</h4><p><code>Array.from()</code> 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。然后返回一个新数组，原数组不变。</p><blockquote><p>语法 : Array.from(arrayLike, callbackFn, thisArg)<br>参数:</p></blockquote><ul><li>arrayLike : 必选,想要转换成数组的类数组对象或可迭代的对象</li><li>callbankFn : 可选,回调函数，新生成的数组会经过该函数的加工再返回</li><li>thisArg : 可选,回调函数执行时this指向的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg = &#123;<span class="number">0</span>:<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>:<span class="string">&#x27;b&#x27;</span>,<span class="number">2</span>:<span class="string">&#x27;c&#x27;</span>, <span class="attr">length</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">Array</span>.from(arg, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//  value: 每项的键值</span></span><br><span class="line">  <span class="keyword">return</span> value;  <span class="comment">// 必须指定返回值，否则返回的新数组元素都为undefined</span></span><br><span class="line">&#125;,arg)</span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;def&#x27;</span>]));  <span class="comment">//[&quot;abc &quot;,&quot;def&quot;]</span></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">&#x27;ab&#x27;</span>],[<span class="number">2</span>,<span class="string">&#x27;cd&#x27;</span>]])) <span class="comment">// [[1,&#x27;ab&#x27;],[2,&#x27;cd&#x27;]]</span></span><br></pre></td></tr></table></figure><h3 id="不改变原数组的方法"><a href="#不改变原数组的方法" class="headerlink" title="不改变原数组的方法"></a>不改变原数组的方法</h3><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><code>concat()</code> 方法用于多个数组的合并。它将新数组的成员，添加到原数组成员的后部，然后返回一个新数组，原数组不变。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;hello&#x27;</span>].concat([<span class="string">&#x27;world&#x27;</span>])</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;world&quot;]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;hello&#x27;</span>].concat([<span class="string">&#x27;world&#x27;</span>], [<span class="string">&#x27;!&#x27;</span>])</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;world&quot;, &quot;!&quot;]</span></span><br><span class="line"></span><br><span class="line">[].concat(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="comment">// [&#123; a: 1 &#125;, &#123; b: 2 &#125;]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>].concat(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment">// [2, &#123;a: 1&#125;]</span></span><br></pre></td></tr></table></figure><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><code>join()</code>方法将一个数组(或一个类数组对象)的所有元素连接成一个字符串，并返回这个字符串。如果数组只有一个项目，那么将直接返回该项目而不使用分隔符；<br>如果没有传参，分隔符默认为逗号。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Fire&#x27;</span>,<span class="string">&#x27;Air&#x27;</span>,<span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line">arr.join() <span class="comment">// &quot;Fire,Air,Water&quot;</span></span><br><span class="line">arr.join(<span class="string">&#x27;&#x27;</span>) <span class="comment">// &quot;FireAirWater&quot;</span></span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><code>slice()</code>方法返回一个新数组，这一对象是一个由<code>begin</code>和<code>end</code>决定的原数组的浅拷贝(包括<code>begin</code>,不包括<code>end</code>).原数组不会被改变<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.slice(<span class="number">2</span>) <span class="comment">//  [3,4,5]</span></span><br><span class="line">arr.slice(<span class="number">2</span>,<span class="number">4</span>) <span class="comment">//[3,4]</span></span><br></pre></td></tr></table></figure><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><code>toString()</code>返回一个字符串，表示指定的数组及元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>].toString()</span><br><span class="line"><span class="comment">//  &quot;1,2,a,b&quot;</span></span><br></pre></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><code>indexOf()</code>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。<br>第一个参数为要查找的元素（必选）， 第二个参数是开始查询的位置（可选）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">arr.indexOf(<span class="string">&#x27;c&#x27;</span>) <span class="comment">// 2</span></span><br><span class="line">arr.indexOf(<span class="string">&#x27;c&#x27;</span>,<span class="number">3</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="改变原数组的方法"><a href="#改变原数组的方法" class="headerlink" title="改变原数组的方法"></a>改变原数组的方法</h3><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p><code>pop()</code>方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.pop()) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><h5 id="pop-原理"><a href="#pop-原理" class="headerlink" title="pop()原理"></a>pop()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  len--;</span><br><span class="line">  <span class="keyword">let</span> value = arr[len];</span><br><span class="line">  <span class="keyword">delete</span> arr[len]</span><br><span class="line">  arr.length = len;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p><code>push()</code> 方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.push(<span class="number">1</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [1,2,3,4,5,1]</span></span><br></pre></td></tr></table></figure><h5 id="push-原理"><a href="#push-原理" class="headerlink" title="push()原理"></a>push()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._push = <span class="function"><span class="keyword">function</span>(<span class="params">...items</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length,</span><br><span class="line">    argLen = items.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;argLen;i++)&#123;</span><br><span class="line">    arr[len+i] = items[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> newLength = len+argLen;</span><br><span class="line">  arr.length = newLength;</span><br><span class="line">  <span class="keyword">return</span> newLength</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p><code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse()) <span class="comment">// [5,4,3,2,1]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p><code>splice()</code> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">// [1] 返回被删除的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&#x27;add1&#x27;</span>)) <span class="comment">//[] 空数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [&#x27;add1&#x27;,1，2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;add2&#x27;</span>)) <span class="comment">//[1] 返回被替换的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [&#x27;add2&#x27;，2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h4><p><code>shift()</code> 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.shift()) <span class="comment">// 返回删除元素的值</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p><code>unshift()</code> 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.unshift(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">// 6  返回该数组的新长度</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)  <span class="comment">// [0,1,2,1,2,3]</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p><code>sort()</code> 方法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的，该方法改变原数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort()) <span class="comment">// [100, 16, 50, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> a-b &#125;)) <span class="comment">// [5, 8, 16, 50, 100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">16</span>,<span class="number">50</span>,<span class="number">6</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="keyword">return</span> b-a &#125;)) <span class="comment">// [100,50,16,8,5]</span></span><br></pre></td></tr></table></figure><h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p><font color=red>遍历类型的方法最后返回的都是一个新数组。并不会改变原有数组的值(forEach除外)</font></p><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p><code>forEach()</code>方法用于调用数组的每一个元素，并将元素传递给回调函数。</p><blockquote><p>语法: array.forEach( callback(currentValue, index, array),thisArg)</p></blockquote><ul><li>callback: 为数组中每个元素执行的函数，该函数接收一至三个参数<ul><li>currentValue : 必填,当前元素</li><li>index : 可选,当前元素的索引值</li><li>arr : 可选,当前元素所属的数组对象</li><li>thisArg : 可选,传递给函数的this值,如果参数为空,当前回调函数this指向window<br>注意:<br>1、<code>forEach()</code>对于空数组不会执行回调函数.<br>2、for循环可以用continue跳过循环中的一个迭代，<code>forEach()</code>用continue会报错<br>3、<code>forEach()</code>需要用return 跳过循环中的一个迭代，跳过之后会执行下一个迭代<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(arr[i] == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]) <span class="comment">// 1  3</span></span><br><span class="line">&#125;</span><br><span class="line">arr.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(value == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(value)<span class="comment">// 1  3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="forEach原理"><a href="#forEach原理" class="headerlink" title="forEach原理"></a>forEach原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn,thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!thisArg)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="built_in">this</span>.length; i++)&#123;</span><br><span class="line">      fn(<span class="built_in">this</span>[i],i,<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;thisArg.length; i++)&#123;</span><br><span class="line">      fn.call(thisArg,thisArg[i],i,thisArg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h4><p><code>every()</code> 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试，返回一个布尔值。</p><blockquote><p>语法 : arr.every(callback(value, index, array), thisArg)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].every( <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">Number</span>.isInteger(value) );  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以将<code>every()</code>方法看做一个等价于逻辑与的数组</p><h5 id="every-实现原理"><a href="#every-实现原理" class="headerlink" title="every 实现原理"></a>every 实现原理</h5><p>为每个值执行回调，如果在任何时候返回false，则退出循环，整个方法返回false。如果循环终止都没有进入到<code>if</code>语句，说明每个条件都成立，则方法返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._every = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[i];</span><br><span class="line">    <span class="keyword">if</span>(!callback(value, i, arr))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p><code>some()</code>方法<code>every()</code>刚好相反，即只要其中一个为<code>true</code>就会返回<code>true</code>。与<code>every</code>方法类似，可以将<code>some</code>方法看做一个等价的逻辑或数组</p><h5 id="some-实现原理"><a href="#some-实现原理" class="headerlink" title="some 实现原理"></a>some 实现原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._some = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; I&lt;len; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[i];</span><br><span class="line">    <span class="keyword">if</span>(callback(value,i,arr))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p><code>filter()</code> 方法创建一个新数组, filter会把传入的函数依次作用于每个元素，然后根据返回值是 true 还是false决定保留还是丢弃该元素。用于把Array的某些元素过滤掉，然后将剩下的元素放入新数组中返回。</p><blockquote><p>语法: var newArr = arr.filter(callback(element, index, array),thisArg)<br>参数: </p></blockquote><ul><li>callback : 用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留<ul><li>element : 数组中正在处理的元素</li><li>index : 正在处理的元素在数组中的索引</li><li>array : 当前调用filter的数组本身</li></ul></li><li>thisArg : 改变回调函数中this的指向<h5 id="filter-的原理"><a href="#filter-的原理" class="headerlink" title="filter()的原理"></a>filter()的原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._filter = <span class="function"><span class="keyword">function</span>(<span class="params">callbackFn,thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(callbackFn) !== <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callbackFn + <span class="string">&#x27;is not a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">this</span>, </span><br><span class="line">    len = arr.length,</span><br><span class="line">    newArr=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(callbackFn(arr[i],i,arr))&#123;</span><br><span class="line">      newArr.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><blockquote><p><code>map()</code> 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p></blockquote><blockquote><p>语法: var newArr = array.map( function(currentValue, index, arr),thisArg)<br>参数同forEach()</p></blockquote><h5 id="map-原理"><a href="#map-原理" class="headerlink" title="map()原理"></a>map()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._map = <span class="function"><span class="keyword">function</span>(<span class="params">callbackFn, thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> === <span class="literal">null</span> || <span class="built_in">this</span> === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot read property &#x27;_map&#x27; of null&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(callbackFn)!= <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callbackFn+<span class="string">&#x27;is not a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    len = arr.length,</span><br><span class="line">    newArr = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        <span class="keyword">let</span> kValue = arr[i];</span><br><span class="line">        <span class="keyword">let</span> mappedValue = callbackFn.call(thisArg,kValue,i,arr)</span><br><span class="line">        newArr[i] = mappedValue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> b = a._map(<span class="function"><span class="keyword">function</span> (<span class="params">item, i, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p><blockquote><p>语法 : var result = arr.reduce(callback(acc, cur, index, array), initValue)<br>参数: </p></blockquote><ul><li>callback : 执行数组中每个值得函数,包含四个参数<ul><li>acc : 必选,initvalue提供的初始值,或者是 上一次电用的返回值(可以理解为收集箱,收集每次调用后的返回值)</li><li>cur : 必选,数组中当前被处理的元素</li><li>index : 可选,当前元素的索引</li><li>array : 可选,调用<code>reduce()</code>的数组</li></ul></li><li>initValue : 可选,作为第一次调用时 callback的第一个参数</li></ul><h5 id="reduce-原理"><a href="#reduce-原理" class="headerlink" title="reduce()原理"></a>reduce()原理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype._reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callbackFn, initValue</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 异常处理，和map类似</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> === <span class="literal">null</span> || <span class="built_in">this</span> === <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Cannot read property &#x27;_reduce&#x27; of null&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理回调类型异常</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(callbackFn)!= <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callbackFn+<span class="string">&#x27;is not a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">this</span>,</span><br><span class="line">    <span class="comment">// 判断是否传入初始值，如果没有，初始值为当前数组的第一位,否则以传入的值当做初始值</span></span><br><span class="line">    acc = <span class="built_in">arguments</span>.length === <span class="number">1</span> ? arr[<span class="number">0</span>] : initValue,</span><br><span class="line">    <span class="comment">// 若没有传入初始值，数组第一位为初始值，所以遍历要从第二位开始，也就是下标为1的位置</span></span><br><span class="line">    startIdx = <span class="built_in">arguments</span>.length === <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = startIdx; i&lt;arr.length; i++)&#123;</span><br><span class="line">    acc = callbackFn(acc,arr[i],i,arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> acc</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="Array" scheme="https://uihh.cn/categories/javascript/Array/"/>
    
    
    <category term="数组常用方法" scheme="https://uihh.cn/tags/%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>接口的错误拦截</title>
    <link href="https://uihh.cn/2021/06/23/%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%94%99%E8%AF%AF%E6%8B%A6%E6%88%AA/"/>
    <id>https://uihh.cn/2021/06/23/%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%94%99%E8%AF%AF%E6%8B%A6%E6%88%AA/</id>
    <published>2021-06-23T07:17:25.000Z</published>
    <updated>2021-06-23T12:16:19.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对axios进行基础配置"><a href="#对axios进行基础配置" class="headerlink" title="对axios进行基础配置"></a>对axios进行基础配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  main.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL = <span class="string">&#x27;/api&#x27;</span>,  <span class="comment">// 根据前端的跨域方式做调整</span></span><br><span class="line">  timeout = <span class="number">8000</span>   <span class="comment">// 设置超时时间</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="request拦截器（请求发送后端之前）"><a href="#request拦截器（请求发送后端之前）" class="headerlink" title="request拦截器（请求发送后端之前）"></a>request拦截器（请求发送后端之前）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">instance.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(config);  <span class="comment">// config将发送到后端</span></span><br><span class="line">    config.headers.token = <span class="string">&#x27;此处可设置token的内容&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;  <span class="comment">//当发生错误时，执行该部分代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);  <span class="comment">//打印错误信息</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="response拦截器（数据返回后）"><a href="#response拦截器（数据返回后）" class="headerlink" title="response拦截器（数据返回后）"></a>response拦截器（数据返回后）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">instance.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = response.data;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;状态码正确&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;弹出此异常&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error),</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;对axios进行基础配置&quot;&gt;&lt;a href=&quot;#对axios进行基础配置&quot; class=&quot;headerlink&quot; title=&quot;对axios进行基础配置&quot;&gt;&lt;/a&gt;对axios进行基础配置&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  main.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; axios &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;axios&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; instance = axios.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseURL = &lt;span class=&quot;string&quot;&gt;&amp;#x27;/api&amp;#x27;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;// 根据前端的跨域方式做调整&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  timeout = &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// 设置超时时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="axios" scheme="https://uihh.cn/categories/axios/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中watch用法详解</title>
    <link href="https://uihh.cn/2021/06/22/watch/"/>
    <id>https://uihh.cn/2021/06/22/watch/</id>
    <published>2021-06-22T11:01:52.000Z</published>
    <updated>2021-06-23T12:11:21.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>  当data中变量的值变化时，watch监听到并且执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">value</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">value</span>(<span class="params">newVal, oldVal</span>)</span>&#123;</span><br><span class="line">      <span class="comment">/* 要执行操作 */</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="handler方法和immediate属性"><a href="#handler方法和immediate属性" class="headerlink" title="handler方法和immediate属性"></a>handler方法和immediate属性</h2><p>  上面的例子只有value的值变化时，watch才会执行。如果想从开始的时候就对value进行监听，就需要用到 <code>handler</code> 和 <code>immediate</code>属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="attr">value</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVla</span>)</span> &#123;</span><br><span class="line">      <span class="comment">/* 要执行操作 */</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当immediate 值为true时, 会立即执行handler方法</span></span><br><span class="line">    <span class="comment">// 如果值为false，效果同上面例子</span></span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="deep属性（深度监听）"><a href="#deep属性（深度监听）" class="headerlink" title="deep属性（深度监听）"></a>deep属性（深度监听）</h2><blockquote><p>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变。需要添加deep属性对 对象进行深度监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">obj</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">c</span>:&#123;</span><br><span class="line">          <span class="attr">d</span>:<span class="number">3</span></span><br><span class="line">          <span class="attr">f</span>:<span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="attr">obj</span>:&#123;</span><br><span class="line">      <span class="function"><span class="title">handler</span>(<span class="params">newVal, oldVal</span>)</span>&#123;&#125;,</span><br><span class="line">      <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时会给整个对象的属性都加上监听，当对象属性较多时，每个值变化都会触发handler函数。<br>如果只需要监听一个属性，可以使用字符串形式监听对象内的单个属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  <span class="string">&#x27;c.d&#x27;</span>:&#123;</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newVla, oldVal</span>)</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">deep</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组（一维、多维）的变化不需要通过深度监听，对象数组中对象的属性变化需要deep的深度监听</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h2&gt;&lt;p&gt;  当data中变量的值变化时，watch监听到并且执行&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;watch&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newVal, oldVal&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/* 要执行操作 */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://uihh.cn/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://uihh.cn/2021/06/07/Promise/"/>
    <id>https://uihh.cn/2021/06/07/Promise/</id>
    <published>2021-06-07T10:19:15.000Z</published>
    <updated>2021-06-24T04:58:30.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise详解"><a href="#Promise详解" class="headerlink" title="Promise详解"></a>Promise详解</h2><span id="more"></span><h3 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h3><blockquote><ul><li>promise有三个状态:<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>pending</code>[待定] 初始状态 &nbsp;&nbsp;|&nbsp;&nbsp; <code>fulfilled</code>[实现] 成功 &nbsp;&nbsp;|&nbsp;&nbsp; <code>rejected</code>[被否决] 失败<br>当promise状态发生改变时，就会触发then()里的响应函数处理后续步骤；<br>promise 状态一经改变，状态固化，不会再改变<br><code>Promise</code> 有两种状态改变的方式，既可以从<code>pending</code>转变为<code>fulfilled</code>,也可以从<code>pending</code>转变为<code>rejected</code>.一旦状态改变,就固化了，会一直保持这个状态，不会再发生变化。当状态发生变化时，promoise.then绑定的函数会被立即调用。<br><code>new Promise()</code> 是同步执行,一旦新建会「立即执行」，无法取消。</li></ul></blockquote><p>使用<code>new</code>构建一个<code>Promise</code>对象.<code>Promise</code>接受一个函数参数,该函数的两个参数分别是<code>resolve</code>和<code>reject</code>.这两个函数就是回调函数.<br><code>resolve</code>函数的作用: 在异步操作成功时调用,并将异步操作的结果作为参数传递出去;<br><code>reject</code>函数: 在异步操作失败时调用,并将异步操作报出的错误作为参数传递出去.</p><p>Promise实例生成后,可以用<code>then</code>方法指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建Promise</span></span><br><span class="line"><span class="keyword">var</span> promsie = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="comment">/*异步任务执行成功*/</span>)&#123;</span><br><span class="line">    resovle()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">/*异步任务执行失败*/</span> </span><br><span class="line">    reject()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// resolve调用的 成功的回调函数</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// reject调用的 失败的回调函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>then</code>方法会返回一个<code>Promise</code>对象,它有两个参数,分别为Promise从<code>pending</code>变为<code>fulfilled</code>和<code>rejected</code>时的回调函数(第二个参数非必选). 这两个函数都<b>接受Promise对象传出的值作为参数</b>.<br><code>then</code>就是定义<code>resolve</code>和<code>reject</code>函数的,其<code>resolve</code>参数相当于:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveFun</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// data为promise传出的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建Promise中的’resolve(data)’,相当于执行resolveFun函数.<br>Promise新建后就会立即执行.<code>then</code>方法中指定的回电函数,<b>将当前脚本所有同步任务执行完成后才会执行</b>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">promise.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出: 1, 2, 4, 3</span></span><br></pre></td></tr></table></figure><p>由于<code>resolve</code>指定的是异步操作成功后的回调函数，他需要等所有同步代码执行完成后才会执行，因此最后打印 3。</p><h3 id="基本API"><a href="#基本API" class="headerlink" title="基本API"></a>基本API</h3><h4 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h4><blockquote><p>语法: Promise.prototype.then(onFulfilled, onRejected)<br>对promise添加<code>onFulfilled</code>和<code>onRejected</code>回调, 并返回的是一个新的Promise实例(不是.then前的那个Promise实例),且将返回值作为参数传入这个新的Promise对象的<code>resolver</code>函数<br>因此，我们可以使用链式写法。由于前一个回调函数返回的还是一个Promise对象（即有异步操作），后一个回调函数会等待该Promise对象的<b>状态发生变化</b>，才会被调用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ajax异步回调 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url, param, successFun, errorFun</span>)</span>&#123;</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:url,</span><br><span class="line">    <span class="attr">param</span>:param,</span><br><span class="line">    <span class="attr">async</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">success</span>: successFun,</span><br><span class="line">    <span class="attr">error</span>: errorFun</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 构建promise实例 */</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">url, param</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    request(url, param, resolve, reject)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Promise的链式调用 */</span> </span><br><span class="line">test(<span class="string">&#x27;test1.html&#x27;</span>, <span class="string">&#x27;&#x27;</span>).then( <span class="function"><span class="keyword">function</span>(<span class="params">data1</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第一次请求成功&#x27;</span>,data1);</span><br><span class="line">  <span class="keyword">return</span> test(<span class="string">&#x27;test2.html&#x27;</span>,data1)</span><br><span class="line">&#125;).then( <span class="function"><span class="keyword">function</span>(<span class="params">data2</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第二次请求成功&#x27;</span>， data2)</span><br><span class="line">  <span class="keyword">return</span> test(<span class="string">&#x27;test3.html&#x27;</span>, data2)</span><br><span class="line">&#125;)</span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">data3</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;第三次请求成功&#x27;</span>， data3)</span><br><span class="line">&#125;).catch( <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// catch 捕捉前面的错误</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;请求失败&#x27;</span>, error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h4><blockquote><p>语法: Promise.prototype.catch(onRejected)<br>该方法是.then(null, onRejected)的另一种写法,用于指定发生错误时的回调函数.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;)</span><br><span class="line">    .cathc( <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/****** 等同于 ******/</span> </span><br><span class="line">promise.then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/****** 等同于 ******/</span> </span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用catch捕捉错误 */</span> </span><br><span class="line">promise.catch( <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出： Uncaught (in promise) Error: error</span></span><br></pre></td></tr></table></figure><p><code>reject</code>等同于抛出错误。<br>promise对象的错误，会一直向后传递，直到被捕获。 即错误总会被下一个<code>catch</code>所捕获,<code>then</code>方法指定的回调函数若抛出错误,也会被下一个<code>catch</code>捕获. <code>catch</code>中也能抛错,则需要后面的<code>catch</code>捕获.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">&#x27;test1.html&#x27;</span>).then( <span class="function"><span class="keyword">function</span>(<span class="params">data1</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 要执行的操作</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data2</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 要执行的操作</span></span><br><span class="line">&#125;).catch( <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 处理前面三个Promise 产生的错误</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上文提到过，promise状态一旦改变就会凝固，不会再改变。因此promise一旦<code>fulfilled</code>了，再抛错，也不会变为<code>rejected</code>，就不会被<code>catch</code>了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">promise.catch( <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果没有使用<code>catch</code>方法指定处理错误的回调函数，Promise对象抛出的错误不会传递到外层代码，即不会有任何反应（Chrome会抛错），这是Promise的另一个缺点</p><h4 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h4><blockquote><p>语法: Promise.all(iterable)<br>该方法用于将多个Promise实例，包装成一个新的Promise实例。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p><code>Promise.all</code>方法接受一个数组（或具有Iterator接口）作参数，数组中的对象（p1、p2、p3）均为promise实例（如果不是一个promise，该项会被用<code>Promise.resolve</code>转换为一个promise)。它的状态由这三个promise实例决定。</p><ul><li><p>当p1, p2, p3状态都变为<code>fulfilled</code>，p的状态才会变为<code>fulfilled</code>，并将三个promise返回的结果，按参数的顺序（而不是 <code>resolved</code>的顺序）存入数组，传给p的回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>, <span class="string">&quot;first&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;second&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="string">&quot;third&quot;</span>);</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span>(<span class="params">values</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(values); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//约 3s 后  [&quot;first&quot;, &quot;second&quot;, &quot;third&quot;] </span></span><br></pre></td></tr></table></figure></li><li><p>当p1, p2, p3其中之一状态变为<code>rejected</code>，p的状态也会变为<code>rejected</code>，并把第一个被<code>reject</code>的promise的返回值，传给p的回调函数，如例3.9。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>, <span class="string">&quot;one&quot;</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">setTimeout</span>(reject, <span class="number">2000</span>, <span class="string">&quot;two&quot;</span>); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2, p3]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, error);    <span class="comment">// =&gt; reject three</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 reject three</span></span><br></pre></td></tr></table></figure><p>这多个 promise 是同时开始、并行执行的，而不是顺序执行。从下面例子可以看出。如果一个个执行，那至少需要 1+32+64+128</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerPromisefy</span>(<span class="params">delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            resolve(delay);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> startDate = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    timerPromisefy(<span class="number">1</span>),</span><br><span class="line">    timerPromisefy(<span class="number">32</span>),</span><br><span class="line">    timerPromisefy(<span class="number">64</span>),</span><br><span class="line">    timerPromisefy(<span class="number">128</span>)</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span> (<span class="params">values</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Date</span>.now() - startDate + <span class="string">&#x27;ms&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(values);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出：133ms       //不一定，但大于128ms</span></span><br><span class="line"><span class="comment">//      [1,32,64,128]</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h4><blockquote><p>语法： Promise.race(iterable)<br>该方法同样是将多个Promise实例，包装成一个新的Promise实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = <span class="built_in">Promise</span>.race([p1,p2,p3])</span><br></pre></td></tr></table></figure><p><code>Promise.race</code>方法同样接受一个数组（或具有Iterator接口）作参数。当p1, p2, p3中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(reject, <span class="number">500</span>, <span class="string">&quot;one&quot;</span>); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&quot;two&quot;</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value); </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出：resolve two</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p4 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&quot;four&quot;</span>); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([p3, p4]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value);              </span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, error); </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出：reject four</span></span><br></pre></td></tr></table></figure><p>在第一个promise对象变为resolve后，并不会取消其他promise对象的执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fastPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fastPromise&#x27;</span>);</span><br><span class="line">        resolve(<span class="string">&#x27;resolve fastPromise&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> slowPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;slowPromise&#x27;</span>);</span><br><span class="line">        resolve(<span class="string">&#x27;resolve slowPromise&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第一个promise变为resolve后程序停止</span></span><br><span class="line"><span class="built_in">Promise</span>.race([fastPromise, slowPromise]).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);    <span class="comment">// =&gt; resolve fastPromise</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastPromise</span></span><br><span class="line"><span class="comment"> * resolve fastPromise</span></span><br><span class="line"><span class="comment"> * slowPromise     //仍会执行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="resolve"><a href="#resolve" class="headerlink" title=".resolve()"></a>.resolve()</h4><blockquote><p>语法：<br>Promise.resolve(value);<br>Promise.resolve(promise);<br>Promise.resolve(thenable);<br>可以看成 <code>new Promise</code>的快捷方式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******等同于*******/</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">&#x27;Success&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码会让这个Promise对象立即进入<code>resolved</code>状态，并将结果<code>success</code>传递给then指定的<code>onFulfilled</code>回调函数。由于<code>Promise.resolve()</code>也是返回Promise对象，因此可以用<code>.then()</code>处理其返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;success&#x27;</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出： Success</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Resolving an array</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value[<span class="number">0</span>]);    <span class="comment">// =&gt; 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Resolving a Promise</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;this is p1&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.resolve(p1);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);     <span class="comment">// =&gt; this is p1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise.resolve()</code>的另一个作用就是将<code>thenable</code>对象（即带有<code>then</code>方法的对象）转换为<code>promise</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Promise</span>.resolve(&#123; </span><br><span class="line">  <span class="attr">then</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    resolve(<span class="string">&quot;this is an thenable object!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> <span class="built_in">Promise</span>);     <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);     <span class="comment">// =&gt; this is an thenable object!</span></span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//not called</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再看下面两个例子，无论是在什么时候抛异常，只要promise状态变成<code>resolved</code>或<code>rejected</code>，状态不会再改变，这和新建promise是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = &#123; </span><br><span class="line">  <span class="attr">then</span>: <span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    resolve(<span class="string">&quot;Resolved&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Promise</span>.resolve(p1);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//not called</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);       <span class="comment">// =&gt; Error: error</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在回调函数后抛异常</span></span><br><span class="line"><span class="keyword">var</span> p3 = &#123; </span><br><span class="line">  <span class="attr">then</span>: <span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;Resolved&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p4 = <span class="built_in">Promise</span>.resolve(p3);</span><br><span class="line">p4.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);     <span class="comment">// =&gt; Resolved</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//not called</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="reject"><a href="#reject" class="headerlink" title=".reject()"></a>.reject()</h4><blockquote><p>语法： Promise.reject(reason)<br>这个方法和上述的Promise.resolve()类似，它也是new Promise()的快捷方式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******等同于*******/</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码会让这个Promise对象立即进入<code>rejected</code>状态，并将错误对象传递给<code>then</code>指定的<code>onRejected</code>回调函数。</p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="reject-和-catch-的区别"><a href="#reject-和-catch-的区别" class="headerlink" title="reject 和 catch 的区别"></a>reject 和 catch 的区别</h4><ol><li>使用new Promise(fn)或者它的快捷方式<code>Promise.resolve()</code>、<code>Promise.reject()</code>，返回一个promise对象</li><li>在<code>fn</code>中指定异步的处理<br> 处理结果正常，调用<code>resolve</code><br> 处理结果错误，调用<code>reject</code><br>一般情况，还是建议使用第二种，因为能捕获之前的所有异常。第二种的<code>.catch()</code>也可以使用<code>.then()</code>表示，它们本质上是没有区别的，<code>.catch === .then(null, onRejected)</code></li></ol><h4 id="如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误"><a href="#如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误" class="headerlink" title="如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误"></a>如果在then中抛错，而没有对错误进行处理（即catch），那么会一直保持reject状态，直到catch了错误</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Task A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Task B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Catch Error: A or B&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Final Task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise</span><br><span class="line">  .then(taskA)</span><br><span class="line">  .then(taskB)</span><br><span class="line">  .catch(onRejected)</span><br><span class="line">  .then(finalTask);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 输出： Catch Error: A or B,ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">// 输出： Final Task</span></span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/344/220/3442209697-57eb585a9288f_fix732" alt="avatar"><br>上面例子的输出结果及流程图，可以看出，A抛错时，会按照 taskA → onRejected → finalTask这个流程来处理。A抛错后，若没有对它进行处理，状态就会维持<code>rejected</code>，taskB不会执行，直到<code>catch</code>了错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Task A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Task B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejectedA</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Catch Error: A&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejectedB</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Catch Error: B&quot;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Final Task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line">promise</span><br><span class="line">    .then(taskA)</span><br><span class="line">    .catch(onRejectedA)</span><br><span class="line">    .then(taskB)</span><br><span class="line">    .catch(onRejectedB)</span><br><span class="line">    .then(finalTask);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * Catch Error: A ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment"> * Task B</span></span><br><span class="line"><span class="comment"> * Final Task</span></span><br><span class="line"><span class="comment"> * */</span> </span><br></pre></td></tr></table></figure><p>将本例与上面的例子对比，在taskA后多了对A的处理，因此，A抛错时，会按照A会按照 taskA → onRejectedA → taskB → finalTask这个流程来处理，此时taskB是正常执行的。</p><h4 id="每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"><a href="#每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据" class="headerlink" title="每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据"></a>每次调用then都会返回一个新创建的promise对象，而then内部只是返回的数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法1：对同一个promise对象同时调用 then 方法</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;finally: &quot;</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出： finally: 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2：对 then 进行 promise chain 方式进行调用</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p2.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;finally: &quot;</span> + value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出： finally: 400</span></span><br></pre></td></tr></table></figure><p>第一种方法中，<code>then</code>的调用几乎是同时开始执行的，且传给每个then的value都是100，这种方法应当避免。方法二才是正确的链式调用。<br>因此容易出现下面的错误写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">badAsyncCall</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(data);</span><br><span class="line">    promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line">badAsyncCall(<span class="number">10</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value);          <span class="comment">//想要得到11，实际输出10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//输出： 10</span></span><br></pre></td></tr></table></figure><p>正确的写法应该是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goodAsyncCall</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(data);</span><br><span class="line">    <span class="keyword">return</span> promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">        <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">goodAsyncCall(<span class="number">10</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出： 11</span></span><br></pre></td></tr></table></figure><h4 id="在异步回调中抛错，不会被catch到"><a href="#在异步回调中抛错，不会被catch到" class="headerlink" title="在异步回调中抛错，不会被catch到"></a>在异步回调中抛错，不会被catch到</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数中抛出的错误将像未捕获的错误一样</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;Uncaught Exception!&#x27;</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);       <span class="comment">//不会调用</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="promise状态变为resove或reject，就凝固了，不会再改变"><a href="#promise状态变为resove或reject，就凝固了，不会再改变" class="headerlink" title="promise状态变为resove或reject，就凝固了，不会再改变"></a>promise状态变为resove或reject，就凝固了，不会再改变</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    reject();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        resolve();            <span class="comment">//not called</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> * 4</span></span><br><span class="line"><span class="comment"> * 3</span></span><br><span class="line"><span class="comment"> * */</span> </span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Promise详解&quot;&gt;&lt;a href=&quot;#Promise详解&quot; class=&quot;headerlink&quot; title=&quot;Promise详解&quot;&gt;&lt;/a&gt;Promise详解&lt;/h2&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="Promise" scheme="https://uihh.cn/categories/javascript/Promise/"/>
    
    
    <category term="promise" scheme="https://uihh.cn/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://uihh.cn/2021/06/07/webpack/"/>
    <id>https://uihh.cn/2021/06/07/webpack/</id>
    <published>2021-06-07T09:03:06.000Z</published>
    <updated>2021-06-23T09:15:46.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-config-js配置项模板"><a href="#webpack-config-js配置项模板" class="headerlink" title="webpack.config.js配置项模板"></a>webpack.config.js配置项模板</h2><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>),</span><br><span class="line">HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,  <span class="comment">// development 开发环境    production  生产环境</span></span><br><span class="line">  <span class="comment">// 入口文件  多页面要写成对象格式</span></span><br><span class="line">  <span class="attr">entry</span>:&#123;</span><br><span class="line">    <span class="comment">// 名: 路径</span></span><br><span class="line">    <span class="attr">index</span>:path.resolve(__dirname, <span class="string">&#x27;./src/js/index.js&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 打包</span></span><br><span class="line">  <span class="attr">outpyt</span>:&#123;</span><br><span class="line">    <span class="comment">// 打包到哪个文件夹下</span></span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;/dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>   <span class="comment">//  name是一个变量，自动去寻找entry 下的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置规则</span></span><br><span class="line">  <span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      <span class="comment">// 匹配相同文件后缀结尾的文件，规定这类文件要使用什么loader</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: path.resolve(__dirname, <span class="string">&#x27;node_modules&#x27;</span>)  <span class="comment">// 编译转换时 排除node_modules 内的js文件 </span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 需处理多个loader时，写成数组形式</span></span><br><span class="line">        <span class="comment">// 处理 use 数组时， 案由下到上的顺序，先经过 css-loader  再处理 style-loader</span></span><br><span class="line">        use:[</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use:[</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;scss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tpl$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;ejs-loader&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 放入实例化对象， 例： 需要处理html时，require(&#x27;html-webpack-plugin&#x27;) 需要引入对应插件（一个构造函数）</span></span><br><span class="line">  <span class="comment">// 所有的loader 都不会导入到配置文件中， 以plugin结尾的一般都需要导入</span></span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">minify</span>:&#123;</span><br><span class="line">        <span class="comment">// 移除所有注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 清除所有的空格和换行</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 打包后的文件名称</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 需要打包的文件</span></span><br><span class="line">      <span class="attr">template</span>: path.resolve(__dirname, <span class="string">&#x27;/src/index.html&#x27;</span>),</span><br><span class="line">      <span class="comment">// 入口文件 取决于 entry 里的键名，如果有多个，使用数组的形式</span></span><br><span class="line">      <span class="attr">chunks</span>:[<span class="string">&#x27;index&#x27;</span>],</span><br><span class="line">      <span class="comment">// 排除node_modules</span></span><br><span class="line">      <span class="attr">excludeChunks</span>: [<span class="string">&#x27;node_modules&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="comment">// 当启动devServer时 自动打开浏览器</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 主机</span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">3300</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置运行-webpack-的命令"><a href="#配置运行-webpack-的命令" class="headerlink" title="配置运行 webpack 的命令"></a>配置运行 webpack 的命令</h2><blockquote><p>package.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config webpack.config.js --reason  --color  --progress&quot;</span>,</span><br><span class="line">  <span class="comment">// 打包时的命令</span></span><br><span class="line">  <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dev配置可选项"><a href="#dev配置可选项" class="headerlink" title="dev配置可选项"></a>dev配置可选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-server          启动服务</span><br><span class="line">--content-base dist/        dev-server 运行的目录</span><br><span class="line">--hot                       热启动</span><br><span class="line">--config webpack.config.js  webpack配置项</span><br><span class="line">--progress                  打包的进度</span><br><span class="line">--display-modules           打包时的模块</span><br><span class="line">--colors                    打包时输出彩色文字</span><br><span class="line">--display-reasons           打包时的提示信息</span><br></pre></td></tr></table></figure><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><blockquote><p>安装在开发环境下的<br>–save-dev  /     -D<br>安装在生产环境下    例：ejs<br>–save     /    -S</p><ul><li>webpack 必备工具:<blockquote><p>webpack<br>webpack-cli<br>webpack-dev-server</p></blockquote></li></ul></blockquote><blockquote><ul><li>处理JS  -&gt;  ES6  ES7  ES8 装饰器  babel 编译<blockquote><p>ES6：<br>babel-loader@7<br>babel-core<br>babel-preset-env<br>ES7:<br>babel-plugin-transform-runtime<br>ES8:<br>babel-plugin-transform-decorators<br>babel-plugin-transform-decorators-legacy</p></blockquote></li></ul></blockquote><blockquote><ul><li>样式处理  sass -&gt; css -&gt; style<blockquote><p>sass-loader<br>node-sass<br>css-loader<br>style-loader</p></blockquote></li></ul></blockquote><!-- postcss-loader  autoprefixer   css3 自动添加前缀  适配浏览器--><p>Forth Step:</p><blockquote><ul><li>模板处理  ejs  ||  tpl<blockquote><p>ejs-loader</p></blockquote></li></ul></blockquote><blockquote><ul><li>处理HTML<blockquote><p>html-webpack-plugin</p></blockquote></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;webpack-config-js配置项模板&quot;&gt;&lt;a href=&quot;#webpack-config-js配置项模板&quot; class=&quot;headerlink&quot; title=&quot;webpack.config.js配置项模板&quot;&gt;&lt;/a&gt;webpack.config.js配置项模板&lt;/h2&gt;</summary>
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=suiji&amp;format=images" type="image"/>
    
    
    <category term="webpack" scheme="https://uihh.cn/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://uihh.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>LazyFunction</title>
    <link href="https://uihh.cn/2021/06/03/LazyFunction/"/>
    <id>https://uihh.cn/2021/06/03/LazyFunction/</id>
    <published>2021-06-03T03:51:30.000Z</published>
    <updated>2021-06-23T12:11:41.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h1><span id="more"></span><h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><ol><li>timeStamp 污染全局</li><li>执行第一次之后，timeStamp 已经有值，但后续每次执行都会进入 if 语句<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：</span></span><br><span class="line"><span class="keyword">var</span> timeStamp = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTimeStamp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (timeStamp) &#123;</span><br><span class="line">    <span class="keyword">return</span> timeStamp</span><br><span class="line">  &#125;</span><br><span class="line">  timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="keyword">return</span> timeStamp</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="惰性函数-1"><a href="#惰性函数-1" class="headerlink" title="惰性函数"></a>惰性函数</h2></li><li>执行一遍外层函数，拿到需要的值后，在函数内部重写自身，返回需要的值</li><li>后续调用 不需要每次都执行原函数 重读的代码段<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：</span></span><br><span class="line"><span class="keyword">var</span> getTimeStamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  getTimeStamp = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> timeStamp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getTimeStamp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2></li></ol><h3 id="普通函数添加事件"><a href="#普通函数添加事件" class="headerlink" title="普通函数添加事件"></a>普通函数添加事件</h3><blockquote><p>每次执行都要对浏览器进行判断。 可以在第一次判断后就保留判断结果，再次执行时就不需要判断了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line">      el.addEventListener(type, fn, capture);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">      el.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.call(el)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">      el[<span class="string">&#x27;on&#x27;</span> + type] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="惰性函数添加事件"><a href="#惰性函数添加事件" class="headerlink" title="惰性函数添加事件"></a>惰性函数添加事件</h3><blockquote><p>第一次判断之后，在函数体内部重写自身，后续执行的是重写后的函数，不需要再进行无用的判断</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (el.addEventlistener) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn, capture</span>) </span>&#123;</span><br><span class="line">      el.addEventlistener(type, fn, capture)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">      el.attachEvent(<span class="string">&#x27;on&#x27;</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.call(el)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, fn</span>) </span>&#123;</span><br><span class="line">      el[<span class="string">&#x27;on&#x27;</span> + type] = fn</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> addEvent(el, type, fn, capture);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;惰性函数&quot;&gt;&lt;a href=&quot;#惰性函数&quot; class=&quot;headerlink&quot; title=&quot;惰性函数&quot;&gt;&lt;/a&gt;惰性函数&lt;/h1&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="高阶函数" scheme="https://uihh.cn/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>debounce &amp; throttle</title>
    <link href="https://uihh.cn/2021/06/02/debounce/"/>
    <id>https://uihh.cn/2021/06/02/debounce/</id>
    <published>2021-06-02T09:36:03.000Z</published>
    <updated>2021-06-23T12:11:46.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防抖、节流"><a href="#防抖、节流" class="headerlink" title="防抖、节流"></a>防抖、节流</h2><span id="more"></span><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>n秒内只要触发事件，就重新计时，<br>一直触发事件处理函数的程序永远不能被执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  fn  需要设置防抖的函数</span></span><br><span class="line"><span class="comment">  *  time  执行时需要延迟的时间</span></span><br><span class="line"><span class="comment">  *  triggleNow  是否马上触发第一次</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">box.onmouseover = debounce(test, <span class="number">1000</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, time, triggleNow</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (triggleNow) &#123;</span><br><span class="line">      <span class="keyword">var</span> exec = !t;</span><br><span class="line">      t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        t = <span class="literal">null</span></span><br><span class="line">      &#125;, time)</span><br><span class="line">      <span class="keyword">if</span> (exec) &#123;</span><br><span class="line">        fn.apply(_self, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.apply(_self, args)</span><br><span class="line">      &#125;, time)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  debounced.remove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(t);</span><br><span class="line">    t = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><blockquote><p>事件被触发，n秒之内只执行一次事件处理函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"></span><br><span class="line">input.onkeyup = throttle(check, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> val = <span class="built_in">this</span>.value;</span><br><span class="line">  <span class="keyword">if</span> (val.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Invalid length&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="literal">null</span>,</span><br><span class="line">    begin = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="built_in">this</span>,</span><br><span class="line">      args = argumens,</span><br><span class="line">      cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="built_in">clearTimeout</span>(t);</span><br><span class="line">    <span class="keyword">if</span>( cur - begin &gt;= delay )&#123;</span><br><span class="line">      fn.apply(_self, args);</span><br><span class="line">      begin = cur;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      t = <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.apply(_self, args)</span><br><span class="line">      &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;防抖、节流&quot;&gt;&lt;a href=&quot;#防抖、节流&quot; class=&quot;headerlink&quot; title=&quot;防抖、节流&quot;&gt;&lt;/a&gt;防抖、节流&lt;/h2&gt;</summary>
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=fengjing&amp;format=images" type="image"/>
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="防抖、节流" scheme="https://uihh.cn/tags/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
</feed>
