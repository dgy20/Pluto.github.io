<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://uihh.cn/atom.xml" rel="self"/>
  
  <link href="https://uihh.cn/"/>
  <updated>2021-06-03T09:40:58.235Z</updated>
  <id>https://uihh.cn/</id>
  
  <author>
    <name>yyxxx229</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LazyFunction</title>
    <link href="https://uihh.cn/2021/06/03/LazyFunction/"/>
    <id>https://uihh.cn/2021/06/03/LazyFunction/</id>
    <published>2021-06-03T03:51:30.000Z</published>
    <updated>2021-06-03T09:40:58.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h2><pre><code>1. timeStamp 污染全局2. 执行第一次之后，timeStamp 已经有值，但后续每次执行都会进入 if 语句</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例：</span><br><span class="hljs-keyword">var</span> timeStamp = <span class="hljs-literal">null</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTimeStamp</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (timeStamp) &#123;<br><span class="hljs-keyword">return</span> timeStamp<br>&#125;<br>timeStamp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-keyword">return</span> timeStamp<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h2><pre><code>1.执行一遍外层函数，拿到需要的值后，在函数内部重写自身，返回需要的值2.后续调用 不需要每次都执行原函数 重读的代码段</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例：</span><br><span class="hljs-keyword">var</span> getTimeStamp = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">let</span> timeStamp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br>getTimeStamp = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> timeStamp;<br>&#125;<br><span class="hljs-keyword">return</span> getTimeStamp();<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><h3 id="普通函数添加事件"><a href="#普通函数添加事件" class="headerlink" title="普通函数添加事件"></a>普通函数添加事件</h3><blockquote><p>每次执行都要对浏览器进行判断。 可以在第一次判断后就保留判断结果，再次执行时就不需要判断了。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> addEvent = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.addEventListener) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn, capture</span>) </span>&#123;<br>el.addEventListener(type, fn, capture);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.attachEvent) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn</span>) </span>&#123;<br>el.attachEvent(<span class="hljs-string">&#x27;on&#x27;</span> + type, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>fn.call(el)<br>&#125;)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn</span>) </span>&#123;<br>el[<span class="hljs-string">&#x27;on&#x27;</span> + type] = fn;<br>&#125;<br>&#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h3 id="惰性函数添加事件"><a href="#惰性函数添加事件" class="headerlink" title="惰性函数添加事件"></a>惰性函数添加事件</h3><blockquote><p>第一次判断之后，在函数体内部重写自身，后续执行的是重写后的函数，不需要再进行无用的判断</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> addEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn, capture</span>) </span>&#123;<br><span class="hljs-keyword">if</span> (el.addEventlistener) &#123;<br>addEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn, capture</span>) </span>&#123;<br>el.addEventlistener(type, fn, capture)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (el.attachEvent) &#123;<br>addEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn</span>) </span>&#123;<br>el.attachEvent(<span class="hljs-string">&#x27;on&#x27;</span> + type, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>fn.call(el)<br>&#125;)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>addEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, type, fn</span>) </span>&#123;<br>el[<span class="hljs-string">&#x27;on&#x27;</span> + type] = fn<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> addEvent(el, type, fn, capture);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;普通函数&quot;&gt;&lt;a href=&quot;#普通函数&quot; class=&quot;headerlink&quot; title=&quot;普通函数&quot;&gt;&lt;/a&gt;普通函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. timeStamp 污染全局
2. 执行第一次之后，timeStamp 已经有值，但后续每次执行都会进</summary>
      
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=meizi&amp;format=images" type="image"/>
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="高阶函数" scheme="https://uihh.cn/tags/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>debounce &amp; throttle</title>
    <link href="https://uihh.cn/2021/06/02/debounce/"/>
    <id>https://uihh.cn/2021/06/02/debounce/</id>
    <published>2021-06-02T09:36:03.000Z</published>
    <updated>2021-06-03T03:21:20.200Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>n秒内只要触发事件，就重新计时，<br>一直触发事件处理函数的程序永远不能被执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  *  fn  需要设置防抖的函数</span><br><span class="hljs-comment">  *  time  执行时需要延迟的时间</span><br><span class="hljs-comment">  *  triggleNow  是否马上触发第一次</span><br><span class="hljs-comment">**/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;<br>box.onmouseover = debounce(test, <span class="hljs-number">1000</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">debounce</span>(<span class="hljs-params">fn, time, triggleNow</span>) </span>&#123;<br><span class="hljs-keyword">var</span> t = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> debounced = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>,<br>args = <span class="hljs-built_in">arguments</span>;<br><span class="hljs-keyword">if</span> (t) &#123;<br><span class="hljs-built_in">clearTimeout</span>(t)<br>&#125;<br><span class="hljs-keyword">if</span> (triggleNow) &#123;<br><span class="hljs-keyword">var</span> exec = !t;<br>t = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>t = <span class="hljs-literal">null</span><br>&#125;, time)<br><span class="hljs-keyword">if</span> (exec) &#123;<br>fn.apply(_self, args)<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>fn.apply(_self, args)<br>&#125;, time)<br>&#125;<br>&#125;<br>debounced.remove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">clearTimeout</span>(t);<br>t = <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">return</span> debounced<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><blockquote><p>事件被触发，n秒之内只执行一次事件处理函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;input&#x27;</span>);<br><br>input.onkeyup = throttle(check, <span class="hljs-number">1000</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> val = <span class="hljs-built_in">this</span>.value;<br><span class="hljs-keyword">if</span> (val.length &lt; <span class="hljs-number">6</span>) &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Invalid length&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;success&#x27;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>)</span>&#123;<br><span class="hljs-keyword">var</span> t = <span class="hljs-literal">null</span>,<br>begin = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> _self = <span class="hljs-built_in">this</span>,<br>args = argumens,<br>cur = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime();<br><span class="hljs-built_in">clearTimeout</span>(t);<br><span class="hljs-keyword">if</span>( cur - begin &gt;= delay )&#123;<br>fn.apply(_self, args);<br>begin = cur;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>t = <span class="hljs-built_in">setTimeout</span>( <span class="hljs-function">()=&gt;</span>&#123;<br>fn.apply(_self, args)<br>&#125;,delay)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数防抖&quot;&gt;&lt;a href=&quot;#函数防抖&quot; class=&quot;headerlink&quot; title=&quot;函数防抖&quot;&gt;&lt;/a&gt;函数防抖&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;n秒内只要触发事件，就重新计时，&lt;br&gt;一直触发事件处理函数的程序永远不能被执行&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=fengjing&amp;format=images" type="image"/>
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    <category term="function" scheme="https://uihh.cn/categories/javascript/function/"/>
    
    
    <category term="防抖、节流" scheme="https://uihh.cn/tags/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Symbol.iterator &amp; 生成器函数</title>
    <link href="https://uihh.cn/2021/05/31/Symbol-iterator/"/>
    <id>https://uihh.cn/2021/05/31/Symbol-iterator/</id>
    <published>2021-05-31T09:35:42.000Z</published>
    <updated>2021-06-03T03:20:46.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="给对象添加迭代器属性"><a href="#给对象添加迭代器属性" class="headerlink" title="给对象添加迭代器属性"></a>给对象添加迭代器属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br><span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br><span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br><span class="hljs-attr">c</span>:<span class="hljs-number">3</span>,<br>[<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><span class="hljs-comment">// 把当前对象转换为Map对象</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>)&#123;<br>map.set(key, <span class="hljs-built_in">this</span>[key])<br>&#125;<br><span class="hljs-comment">// map.keys()  键名</span><br><span class="hljs-comment">// map.values() 键值</span><br><span class="hljs-comment">// mao.entries() 键值对</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-function"><span class="hljs-title">next</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">// 拿到每个键值对形成的数组</span><br><span class="hljs-comment">// console.log(map.entries())  =&gt; &#123;&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2, &quot;c&quot; =&gt; 3&#125;</span><br><span class="hljs-keyword">var</span> mapEntries = [...map.entries()];<br><span class="hljs-comment">// mapEntries = [[&quot;a&quot;, 1],[&quot;b&quot;, 2],[&quot;c&quot;, 3]]</span><br><span class="hljs-keyword">if</span>(index &lt; map.size)&#123;<br><span class="hljs-comment">// 只要当前位置比对象的长度小 就返回打散后的map对象的当前下标的值和值为false</span><br>                    <span class="hljs-comment">// done 代表是否迭代完成</span><br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">value</span>:mapEntries[index++],<br><span class="hljs-attr">done</span>:<span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-comment">// 否则返回的值为 undefined  done为true</span><br><span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>:<span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>:<span class="hljs-literal">true</span> &#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h3><blockquote><p>每次调用next函数时，只会执行到下一个yield，之后的代码不会执行。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">let</span> value1 = <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(value1);  <span class="hljs-comment">// &#x27;two&#x27;</span><br><span class="hljs-keyword">let</span> value2 = <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.log(value2);  <span class="hljs-comment">// &#x27;three&#x27;</span><br>    <span class="hljs-keyword">let</span> value3 = <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-built_in">console</span>.log(value3);  <span class="hljs-comment">// &#x27;four&#x27;</span><br>    <span class="hljs-keyword">let</span> value4 = <span class="hljs-keyword">yield</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-built_in">console</span>.log(value4);  <span class="hljs-comment">// undefined</span><br>&#125;<br><span class="hljs-keyword">var</span> iter = test();<br><span class="hljs-comment">// 第一次调用传值不会被接收，第二次传值时会传递给第一个yield位置的变量  第三次传值 -&gt; 第二个yield  以此类推</span><br><span class="hljs-built_in">console</span>.log(iter.next(<span class="hljs-string">&#x27;one&#x27;</span>));  <span class="hljs-comment">//  &#123;value: 1, done: false&#125;</span><br><span class="hljs-built_in">console</span>.log(iter.next(<span class="hljs-string">&#x27;two&#x27;</span>));  <span class="hljs-comment">//  &#123;value: 2, done: false&#125;</span><br><span class="hljs-built_in">console</span>.log(iter.next(<span class="hljs-string">&#x27;three&#x27;</span>));  <span class="hljs-comment">//  &#123;value: 3, done: false&#125;</span><br><span class="hljs-built_in">console</span>.log(iter.next(<span class="hljs-string">&#x27;four&#x27;</span>));  <span class="hljs-comment">//  &#123;value: 4, done: false&#125;</span><br><span class="hljs-built_in">console</span>.log(iter.next());  <span class="hljs-comment">//  &#123;value: undefined, done: true&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="使用生成器函数编写迭代器"><a href="#使用生成器函数编写迭代器" class="headerlink" title="使用生成器函数编写迭代器"></a>使用生成器函数编写迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br><span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<br><span class="hljs-attr">c</span>:<span class="hljs-number">3</span>,<br>[<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span>* (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">this</span>)&#123;<br>map.set(key, <span class="hljs-built_in">this</span>[key])<br>&#125;<br><span class="hljs-keyword">var</span> mapEntries = [...map.entries()];<br><span class="hljs-comment">// 循环生成yield</span><br><span class="hljs-keyword">while</span>(index &lt; mapEntries.length)&#123;<br><span class="hljs-keyword">yield</span> mapEntries[index++];<br>&#125;<br>&#125;<br>&#125;<br> <span class="hljs-comment">// for of  底层相当于调用了 obj[Symbol.iterator].next().value</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">of</span> obj) &#123;<br>   <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// [&quot;a&quot;, 1]  [&quot;b&quot;, 2]  [&quot;c&quot;, 3]  undefined</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;给对象添加迭代器属性&quot;&gt;&lt;a href=&quot;#给对象添加迭代器属性&quot; class=&quot;headerlink&quot; title=&quot;给对象添加迭代器属性&quot;&gt;&lt;/a&gt;给对象添加迭代器属性&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tab</summary>
      
    
    
    <content src="https://api.btstu.cn/sjbz/api.php?lx=dongman&amp;format=images" type="image"/>
    
    
    <category term="javascript" scheme="https://uihh.cn/categories/javascript/"/>
    
    
  </entry>
  
</feed>
